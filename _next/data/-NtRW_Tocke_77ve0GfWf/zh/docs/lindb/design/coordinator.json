{"pageProps":{"page":{"path":"/docs/lindb/10-design/02-coordinator.mdx","meta":{"title":"集群协调"},"title":"集群协调","parent":"Design","commitInfo":{"author":"stone1100","date":"Mon Jun 24 07:03:27 2024"}},"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    div: \"div\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    path: \"path\",\n    pre: \"pre\",\n    span: \"span\",\n    strong: \"strong\",\n    svg: \"svg\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"LinDB 中 Metadata 的协调变更操作由 3 种角色共同完成。\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Master\"\n        }), \"：操作所有 Metadata 变更操作，并通过 ETCD 下发给集群里别的组件，Master 中 Broker 节点的选举出来；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Broker\"\n        }), \"：监听集群中所有状态；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Storage\"\n        }), \"：监听当前 Storage 所在的存储集群的状态；\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"整个集群的协调操作都是由 Master 来完成，那么为什么把这些重要的操作放在 Broker 上呢？\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Broker 其实是充当计算节点，包括读写操作。由于 Broker 需要知道下层所有 Storage 节点的状态信息，所以状态信息的协调任务被放在 Broker 中；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Metadata 的变更不频繁，并且都是轻量操作；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"需要多机房同一数据库的计算能力；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"哪些信息需要处理？\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"数据库 DDL 操作；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Storage 节点管理；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"运行时参数调整；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Storage/Broker 状态管理；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"概述\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/design/coordinator.png\",\n        alt: \"集群元数据及状态协调\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所有的调度操作都基于上图的基本框架逻辑处理，每种角色各自监听 ETCD 中所关心的数据变更操作。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"每个角色针对自己所关心的 Metadata 启动一个异步线程进行监听对应 ETCD 中 Key 的变化，每个 Key 的变化都有一个独立的线程负责监听；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"当所监听的 Key 发现变化之后，由监听线程把对应的事件提交给 State Manager 中的事件列队中，State Manager 会启一个全局线程统一来处理所有事件的变更逻辑，并把处理完的结果存储在 State Manager 的 State Store 中；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"外部所有的状态信息的获取都直接查询 State Manager 的 State Store 中获取，无需再通过 ETCD ，以此来达到当 ETCD 出现问题时还可以通过 State Manager 内存中的数据进行工作；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Master\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Master 负责主要的 Metadata 的变更，Master 通过抢占式从当前存活的 Broker 节点中选举出来，即每个 Broker 节点同时去注册 Master KEY ，谁先注册上成为 Master ；\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"同时每个 Broker 也会 Watch Master KEY，如果 Master KEY 上的信息丢失，重新进行选举，这样的好处是每个 Broker 都知道当前 Master 是哪个节点，可以转发一些请求到当前的 Master 节点上；\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Master KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/master/node\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"选举成功的 KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/master/node/{broker node}\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"选举逻辑完成\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/master/elected/{broker node}\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Master 主要负责以下几种状态机：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Storage Config State Machine;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Database Config State Machine;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Shard Assignment State Machine;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Storage config\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/storage/config\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"用户可以提交 Storage 集群配置信息给任意一台 Broker 节点，该 Broker 节点只是简单的把配置信息写到 \", _jsx(_components.strong, {\n          children: \"/storage/config/{cluster name}\"\n        }), \" 下；\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Master 根据配置信息为每个 Storage 集群建立一个 Storage Live Node State Machine 的 Watch 机制，以追溯每个 Storage 集群节点的存活情况；\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"每个 Storage Cluster 会 Watch Storage 节点的存活情况，并把该 Storage 整体的状态信息写到 \", _jsx(_components.strong, {\n          children: \"/state/storage/cluster/{cluster name}\"\n        }), \" 下以供 \", _jsx(_components.a, {\n          href: \"/docs/lindb/design/coordinator#storage-status\",\n          children: \"Storage Cluster Status State Machine\"\n        }), \" 使用；\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每个 Storage Cluster 的 Watch 机制如下：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"根据 Storage 集群的配置信息，与 Storage 集群的 ETCD 建立关系；\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Watch Storage 集群节点存活的 KEY: \", _jsx(_components.strong, {\n          children: \"/active/nodes\"\n        }), \" (注意有别于与 Broker 的 \", _jsx(_components.strong, {\n          children: \"/active/nodes\"\n        }), \"，这里对应的是 Storage 将要注册的信息)；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"每个 Storage 节点启动的时候，需要注册节点信息到对应的 KEY 下:  \", _jsx(_components.strong, {\n          children: \"/live/nodes/{storage node id}\"\n        }), \";\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Database config\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/database/config\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"用户可以提交数据库 DDL 到任意一台 Broker 节点，该 Broker 节点只作配置写入；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Master 通过 Watch KEY 的变化，知道需要对哪个数据库进行分配操作，根据当前 Storage 集群的节点状态信息，生成 Shard Assignment ，并把 Shard Assignment 信息下发给对应的节点；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"markdown-alert markdown-alert-tip\",\n      dir: \"auto\",\n      children: [\"\\n\", _jsxs(_components.p, {\n        className: \"markdown-alert-title\",\n        dir: \"auto\",\n        children: [_jsx(_components.svg, {\n          className: \"octicon\",\n          viewBox: \"0 0 16 16\",\n          width: \"16\",\n          height: \"16\",\n          \"aria-hidden\": \"true\",\n          children: _jsx(_components.path, {\n            d: \"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"\n          })\n        }), \"TIP\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Shard Assignment : 描述数据库每一分片 Shard 的详细信息：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n        style: {\n          backgroundColor: \"#FAFAFA\",\n          \"--shiki-dark-bg\": \"#1e293b\",\n          color: \"#90A4AE\",\n          \"--shiki-dark\": \"#cad3f5\"\n        },\n        tabIndex: \"0\",\n        children: _jsxs(_components.code, {\n          className: \"language-yaml\",\n          children: [_jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E53935\",\n                \"--shiki-dark\": \"#8AADF4\"\n              },\n              children: \"Name\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#39ADB5\",\n                \"--shiki-dark\": \"#8BD5CA\"\n              },\n              children: \":\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#91B859\",\n                \"--shiki-dark\": \"#A6DA95\"\n              },\n              children: \" 数据库名\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E53935\",\n                \"--shiki-dark\": \"#8AADF4\"\n              },\n              children: \"Option\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#39ADB5\",\n                \"--shiki-dark\": \"#8BD5CA\"\n              },\n              children: \":\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#91B859\",\n                \"--shiki-dark\": \"#A6DA95\"\n              },\n              children: \" 数据库存储引擎的配置信息\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E53935\",\n                \"--shiki-dark\": \"#8AADF4\"\n              },\n              children: \"Shards\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#39ADB5\",\n                \"--shiki-dark\": \"#8BD5CA\"\n              },\n              children: \":\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#91B859\",\n                \"--shiki-dark\": \"#A6DA95\"\n              },\n              children: \" 各 Shard 的分配信息\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#91B859\",\n                \"--shiki-dark\": \"#A6DA95\"\n              },\n              children: \"每个 Shard 分配包括如下信息：\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E53935\",\n                \"--shiki-dark\": \"#8AADF4\"\n              },\n              children: \"ShardID\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#39ADB5\",\n                \"--shiki-dark\": \"#8BD5CA\"\n              },\n              children: \":\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#91B859\",\n                \"--shiki-dark\": \"#A6DA95\"\n              },\n              children: \" 该 Shard 对应的 ID\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"line\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E53935\",\n                \"--shiki-dark\": \"#8AADF4\"\n              },\n              children: \"Replicas\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#39ADB5\",\n                \"--shiki-dark\": \"#8BD5CA\"\n              },\n              children: \":\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#91B859\",\n                \"--shiki-dark\": \"#A6DA95\"\n              },\n              children: \" 该 Shard 下所有 Replicas 的信息，对应上面 Node ID 里面的信息\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"line\"\n          })]\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Shard assignment\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/database/assign\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Broker 通过 Watch 这个 KEY,  在数据分片数量变更时，根据目标 Storage 集群当前在线的节点情况，选举对应数据分成的 Leader 节点，并将选举结果信息下发至相应的节点；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Storage live node\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{storage namespace}/live/nodes\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通过监听对应 Storage 集群每个节点存活的情况，来控制该节点上的数据分片是否需要重新选举新的 Leader 节点，已经当前的副本的存活情况。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"下线节点中有承担数据分片  Leader  的角色，则需要从当前存活的副本节点中选举对应的节点成为新的 Leader，如果当前没有存活的副本节点，则把该数据分片标识为下线状态；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"下线节点只承担数据分片的副本角色，则从存活的副本列表中移除该节点；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"上线节点，把该上节点添加到存活副本列表中，如果此时对应的数据分片为下线状态，选举该节点为 Leader，同时上线该数据分片；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Broker\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Broker 主要负责以下几种状态机：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Live Node State Machine;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Database Config State Machine;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Storage Status State Machine;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Live node\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/live/nodes\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Broker 启动的时候都会把自己的信息注册到 Watch KEY 下面，即 \", _jsx(_components.strong, {\n          children: \"/live/nodes/{broker node}\"\n        }), \"；\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"通过 Watch KEY 的变化，每个 Broker 都知道当前 Broker 集群中存活的节点有哪些；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Database config\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/database/config\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"通过 Watch KEY 的变化，Broker 知道当前集群有哪些 Database 及其配置的配置信息；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Storage status\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{broker namespace}/storage/state\\\"\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Watch KEY 里面的信息由 Master 统一写入，Master 会 Watch 每个 Storage 集群各节点的存活情况，并把最终集群的信息写入到 Watch KEY 下面, 具体请看 \", _jsx(_components.a, {\n          href: \"/docs/lindb/design/coordinator#storage-live-node\",\n          children: \"Storage Live Node State Machine\"\n        }), \"；\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"通过 Watch KEY 的变化，可以知道每个 Storage 集群整体状态信息；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"处理查询请求时，通过该状态信息来请求对应 Storage 节点的数据；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"处理写入请求时，通过该状态信息中获取目标数据分片的 Leader 节点，并建立对应的数据写入通道；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Storage 主要负责以下几种状态机：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Live Node State Machine;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Shard Assignment State Machine;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Live node\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{storage namespace}/live/nodes\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Storage 启动的时候都会把自己的信息注册到 Watch KEY 下面，即 \", _jsx(_components.strong, {\n          children: \"/live/nodes/{storage node}\"\n        }), \"；\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"通过 Watch KEY 的变化，每个 Storage 都知道当前 Storage 集群中存活的节点有哪些；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Shard assignment\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Watch KEY\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" /{storage namespace}/database/assign\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"通过 Watch KEY 的变化， Storage 节点根据对应 Database 的 Shard 分配信息来确定是否需要在本地构建对应的数据存储引擎来存储数据；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"容错\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"整个过程中 ETCD 成为了一个非常核心的组节，因为所有的协调及调度信息都是通过 ETCD 来完成。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"大部分 Metadata  信息都存放在 ETCD 中；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"因此如果 ETCD 出问题了对整个系统会产生很大的影响，那么怎么把影响做到最小是比较关键的：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"首先 ETCD 挂了，极端情况 ETCD 中的数据损坏不能恢复了怎么办? 因此需要在每次 Metadata 变更之后相关节点都需要做好本地的备份操作，并有能力通过这些备份数据能还原到新的 ETCD 集群中；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ETCD 出问题不应该影响整个系统的可用性，即不影响正常的读写操作；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"限制：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"影响 Metadata 的变更，但此操作本身为一个低频操作，是可被接受的；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如此时 Shard Leader 节点出现问题，写入该节点的数据，会临时写到别的 Shard 中，暂时不能读取该节点中的数据；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如此时 Shard Follower 节点出现问题，可能会影响副本数据不一致，但数据会暂存在 Leader 节点；\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tocItems":[{"id":"概述","level":2,"title":"概述"},{"id":"master","level":2,"title":"Master"},{"id":"storage-config","level":3,"title":"Storage config"},{"id":"database-config","level":3,"title":"Database config"},{"id":"shard-assignment","level":3,"title":"Shard assignment"},{"id":"storage-live-node","level":3,"title":"Storage live node"},{"id":"broker","level":2,"title":"Broker"},{"id":"live-node","level":3,"title":"Live node"},{"id":"database-config","level":3,"title":"Database config"},{"id":"storage-status","level":3,"title":"Storage status"},{"id":"storage","level":2,"title":"Storage"},{"id":"live-node","level":3,"title":"Live node"},{"id":"shard-assignment","level":3,"title":"Shard assignment"},{"id":"容错","level":2,"title":"容错"}],"releases":null,"sidebar":[{"index":2,"title":"Getting Started","children":[{"index":1,"title":"Docker","children":[],"href":"/docs/lindb/getting-started/docker"},{"index":2,"title":"安装包","children":[],"href":"/docs/lindb/getting-started/package"}]},{"index":3,"title":"Developer Guide","children":[{"index":1,"title":"建立连接","children":[],"href":"/docs/lindb/developer-guide/connect"},{"index":2,"title":"创建数据库","children":[],"href":"/docs/lindb/developer-guide/create-database"},{"index":3,"title":"写入数据","children":[],"href":"/docs/lindb/developer-guide/insert-data"},{"index":4,"title":"查询数据","children":[],"href":"/docs/lindb/developer-guide/query-data"}]},{"index":4,"title":"Deployment","children":[{"index":1,"title":"Kubernetes","children":[],"href":"/docs/lindb/deployment/kubernetes"},{"index":2,"title":"手动部署","children":[],"href":"/docs/lindb/deployment/manual"}]},{"index":5,"title":"Client","children":[{"index":1,"title":"CLI","children":[],"href":"/docs/lindb/client/cli"},{"index":2,"title":"客户端 SDK","children":[],"href":"/docs/lindb/client/client-libraries"},{"index":3,"title":"Go","children":[],"href":"/docs/lindb/client/go"},{"index":4,"title":"Java","children":[],"href":"/docs/lindb/client/java"}]},{"index":6,"title":"Lin Ql","children":[{"index":1,"title":"SQL","children":[],"href":"/docs/lindb/lin-ql/sql"}]},{"index":7,"title":"Admin Console","children":[{"index":1,"title":"简介","children":[],"href":"/docs/lindb/admin-console/index"},{"index":2,"title":"集群状态","children":[],"href":"/docs/lindb/admin-console/overview"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/admin-console/search"},{"index":4,"title":"数据浏览","children":[],"href":"/docs/lindb/admin-console/explore"},{"index":5,"title":"监控","children":[],"href":"/docs/lindb/admin-console/monitoring"},{"index":6,"title":"元数据","children":[],"href":"/docs/lindb/admin-console/metadata"}]},{"index":8,"title":"Api","children":[{"index":1,"title":"介绍","children":[],"href":"/docs/lindb/api/index"},{"index":2,"title":"数据写入","children":[],"href":"/docs/lindb/api/insert"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/api/query"},{"index":4,"title":"集群状态","children":[],"href":"/docs/lindb/api/state"}]},{"index":9,"title":"Reference","children":[{"index":1,"title":"数据模型","children":[],"href":"/docs/lindb/reference/data-model"},{"index":2,"title":"Metric","children":[],"href":"/docs/lindb/reference/metric"},{"index":3,"title":"配置参数","children":[],"href":"/docs/lindb/reference/configuration"}]},{"index":10,"title":"Design","children":[{"index":1,"title":"架构","children":[],"href":"/docs/lindb/design/architecture"},{"index":2,"title":"集群协调","children":[],"href":"/docs/lindb/design/coordinator"},{"index":3,"title":"数据复制","children":[],"href":"/docs/lindb/design/replication"},{"index":4,"title":"查询","children":[],"href":"/docs/lindb/design/query"},{"index":5,"title":"存储","children":[],"href":"/docs/lindb/design/storage"},{"index":6,"title":"内存数据库","children":[],"href":"/docs/lindb/design/memory-database"},{"index":7,"title":"例排索引","children":[],"href":"/docs/lindb/design/inverted-index"}]}],"locale":"zh","_nextI18Next":{"initialI18nStore":{"zh":{"translation":{"A lightweight, observability pipeline":"轻量级数据处理平台","A single server could easily support more than one million write TPS.":"机支持百万以上TPS写入；","Admin Console":"控制台","All-in-one observability platform":"一站式可观测平台","An open-source, cloud native, horizontally scalable, distributed time-series database.":"一款开源分布式时序数据库，具有高性能、高可用性和水平扩展性","An open-source, cloud native, observabilty platform":"云原生开源可观测平台","Architecture":"整体架构","Ask a Question":"提问","Auto Rollup":"自动 Rollup","Bug report":"发现 Bug","Client":"客户端","Cross Multiple IDCs":"跨多数据中心","Deployment":"集群部署","Design":"设计","Developer Guide":"开发手册","Distributed time-series database":"分布式时序数据库","Docs":"文档","Documentation":"文档","Downloads":"下载","Easy to use":"简单易用","Edit this page on Github":"在 GitHub 上编辑此页","Feature request":"新需求","Get Help":"获取帮助","Getting Started":"快速开始","High availability":"高可用","High performance":"高性能","Horizontal scalability":"水平扩展","Horizontal scalable is made simple by adding more new broker and storage nodes without too much thinking and manual operations Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Tags 级别的 Sharding 机制，可将任一 Metric 数据充分分散到多个存储节点；","Insert data":"数据写入","Inside LinDB":"技术内幕","Introduction":"介绍","Inverted index":"例排索引","Key Features":"主要功能","Learn More":"更多","License":"许可证","LinDB is designed to work under a Multi-Active IDCs cloud architecture. The compute layer of LinDB, called brokers, supports efficient Multi-IDCs aggregation query.":"支持各数据中心写入，多数据中心查询聚合；","LinDB supports rollup in specific intervals(minute, hour and day) automatically after creating the database(unlike the Continuous-Query of InfluxDB).":"支持秒级数据写入后自动Rollup到分钟、小时和天的粒度，无需人工介入（如 InfluxDB Continuous-Query）；","On this page":"本页导航","Open source":"开源","Query data":"数据查询","Read the installation guide for more information":{"":"查看安装手册了解更多信息。"},"Reference":"参考手册","Release Date":"发布时间","Release Note":"发布日志","Releases":"变更日志","Resources":"资源","Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Metric + Tags + Fields 的方式，无需提前定义 Schema；","Storage":"存储","Tags-based sharding strategy resolves the hotspot problem":"充分解决热点问题，可通过增加服务器数量线性增加处理能力；","The LinQL is flexible yet handy for real-time data analytics.":"可通过 LinQL 进行实时数据分析；","The multi-channel replication protocol supports any amount of nodes, ensures the system availability.":"独创的多通道复制协议支持任意节点数的多副本机制，可保证整个服务的高可用性；","This page could not be found":"找不到此页面","Uncompress":"解压","Version":"版本","View on GitHub":"GitHub","What's LinDB?":"什么是 LinDB？","What's New in":"","Why LinDB?":"为什么选择 LinDB？","With fundamental techniques like efficient compression storage and parallel computing, LinDB delivers highly optimized query performance.":"高效的数据压缩与多节点的并行查询与计算，专注查询性能优化；"}},"en":{"translation":{"Lin Ql":"Lin QL","Api":"API"}}},"initialLocale":"zh","ns":["translation"],"userConfig":null}},"__N_SSG":true}