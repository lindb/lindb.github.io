{"pageProps":{"page":{"path":"/docs/lindb/10-design/07-inverted-index.mdx","meta":{"title":"Inverted index"},"title":"Inverted index","parent":"Design","commitInfo":{"author":"stone1100","date":"Mon Jun 24 07:03:27 2024"}},"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    div: \"div\",\n    em: \"em\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    path: \"path\",\n    pre: \"pre\",\n    span: \"span\",\n    strong: \"strong\",\n    svg: \"svg\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The main function is to facilitate the \", _jsx(_components.strong, {\n        children: \"Filtering/Grouping\"\n      }), \" operation of \", _jsx(_components.strong, {\n        children: \"Tags\"\n      }), \" under a \", _jsx(_components.strong, {\n        children: \"Metric\"\n      }), \", and also to improve the overall query efficiency.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The entire index is an inverted structure, similar to \", _jsx(_components.strong, {\n        children: \"Lucene\"\n      }), \", but it is simpler, because there is no need to do word segmentation in scenarios such as time series.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Structure\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Metadata\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It mainly stores \", _jsx(_components.strong, {\n        children: \"string->uint32\"\n      }), \" data conversion, similar to the classic \", _jsx(_components.strong, {\n        children: \"OpenTSDB\"\n      }), \" design idea.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Namespace\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Namespace(string value)\"\n          }), _jsx(_components.td, {\n            children: \"Namespace ID(uint32)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Metrics\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Namespace ID + Metric Name(string value)\"\n          }), _jsx(_components.td, {\n            children: \"Metric ID(uint32)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Field\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Metric ID\"\n          }), _jsx(_components.td, {\n            children: \"Field List\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"The structure of a single Field is as follows\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Field ID\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" It is unique under this metric, and this ID is used when storing data\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Field Name\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" field name\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Field Type\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" Field type, such as Sum/Min/Max, etc.\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Tag key\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Metric ID\"\n          }), _jsx(_components.td, {\n            children: \"Tag Key List\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"The structure of a single Tag Key is as follows\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Tag Key ID\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" It is unique under this Database, and this ID is used when storing Index\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Tag Key\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \" :\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" Tag Key(string value)\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Tag value\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Tag Key ID\"\n          }), _jsx(_components.td, {\n            children: \"Tag Values Trie\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Among them, \", _jsx(_components.strong, {\n        children: \"Tag Value\"\n      }), \" stores all the values of \", _jsx(_components.strong, {\n        children: \"Tag Value\"\n      }), \" under the \", _jsx(_components.strong, {\n        children: \"Tag Key\"\n      }), \" in the \", _jsx(_components.strong, {\n        children: \"Trie\"\n      }), \" structure, and generates a unique value under the \", _jsx(_components.strong, {\n        children: \"Tag Key\"\n      }), \" for each \", _jsx(_components.strong, {\n        children: \"Tag Value\"\n      }), \" through the structure of \", _jsx(_components.strong, {\n        children: \"Tag\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"Tag Value ID\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Index\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since the operation of \", _jsx(_components.strong, {\n        children: \"string->uint32\"\n      }), \" has been done in \", _jsx(_components.strong, {\n        children: \"Metadata\"\n      }), \", it is actually stored by numbers in \", _jsx(_components.strong, {\n        children: \"Index\"\n      }), \", which further reduces the storage space.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Forward\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Series IDs(Roaring Bitmap)\"\n          }), _jsx(_components.td, {\n            children: \"Tag Value IDs(Array)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"markdown-alert markdown-alert-tip\",\n      dir: \"auto\",\n      children: [\"\\n\", _jsxs(_components.p, {\n        className: \"markdown-alert-title\",\n        dir: \"auto\",\n        children: [_jsx(_components.svg, {\n          className: \"octicon\",\n          viewBox: \"0 0 16 16\",\n          width: \"16\",\n          height: \"16\",\n          \"aria-hidden\": \"true\",\n          children: _jsx(_components.path, {\n            d: \"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"\n          })\n        }), \"TIP\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The Forward Index is different from the traditional index. The traditional index will store each piece of written data as a forward record. The corresponding time series are the corresponding Tags of the Time Series, and these Tags pass through the string- After the >uint32 conversion, it becomes a string of data, so these data can be compressed into a Forward Index.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Inverted\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Tag Value ID\"\n          }), _jsx(_components.td, {\n            children: \"Series IDs(Roaring Bitmap)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Inquire\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following is an example to illustrate \", _jsx(_components.strong, {\n        children: \"Filtering/Grouping\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Filtering\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following table is the forward data corresponding to the \", _jsx(_components.strong, {\n        children: \"Tags\"\n      }), \" under a \", _jsx(_components.strong, {\n        children: \"Metric(cpu)\"\n      }), \", there are \", _jsx(_components.strong, {\n        children: \"3\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"Tags\"\n      }), \" which are \", _jsx(_components.strong, {\n        children: \"host/cpu/type\"\n      })]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Tags\"\n          }), _jsx(_components.th, {\n            children: \"Series ID\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=0 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"1\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=1 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"2\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=0 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"3\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=1 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"4\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=0 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"5\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=1 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"6\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=2 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"7\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=3 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"8\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=0 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"9\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=1 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"10\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=2 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"11\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=3 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"12\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the data in the above table is inverted, the inverted structure of the following table is formed, and the \", _jsx(_components.strong, {\n        children: \"Posting List\"\n      }), \" is directly stored in the \", _jsx(_components.strong, {\n        children: \"Roaring Bitmap\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Tag\"\n          }), _jsx(_components.th, {\n            children: \"Posting List\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev\"\n          }), _jsx(_components.td, {\n            children: \"1, 2, 3, 4\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test\"\n          }), _jsx(_components.td, {\n            children: \"5, 6, 7, 8, 9, 10, 11, 12\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=0\"\n          }), _jsx(_components.td, {\n            children: \"1, 3, 5, 9\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=1\"\n          }), _jsx(_components.td, {\n            children: \"2, 4, 6, 10\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=2\"\n          }), _jsx(_components.td, {\n            children: \"7, 11\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=3\"\n          }), _jsx(_components.td, {\n            children: \"8, 12\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"1, 2, 5, 6, 7, 8\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"3, 4, 9, 10, 11, 12\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At the same time, the \", _jsx(_components.strong, {\n        children: \"Tag Values\"\n      }), \" under \", _jsx(_components.strong, {\n        children: \"Tag\"\n      }), \" is stored in the form of a prefix tree to facilitate filtering operations on \", _jsx(_components.strong, {\n        children: \"Tag Value\"\n      }), \", such as prefix filtering operations such as \", _jsx(_components.strong, {\n        children: \"host like dev\"\n      }), \"*. After adding the above inverted structure, it is very convenient for the conditional filtering operation. For example, the operation of multiple conditions only needs to do ** and \", _jsx(_components.strong, {\n        children: \"/\"\n      }), \" or ** operations on multiple \", _jsx(_components.strong, {\n        children: \"Posting List\"\n      }), \", basically you can Filtering operations such as \", _jsx(_components.strong, {\n        children: \"And/Or/Not\"\n      }), \" that satisfy multiple daily conditions.\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"markdown-alert markdown-alert-tip\",\n      dir: \"auto\",\n      children: [\"\\n\", _jsxs(_components.p, {\n        className: \"markdown-alert-title\",\n        dir: \"auto\",\n        children: [_jsx(_components.svg, {\n          className: \"octicon\",\n          viewBox: \"0 0 16 16\",\n          width: \"16\",\n          height: \"16\",\n          \"aria-hidden\": \"true\",\n          children: _jsx(_components.path, {\n            d: \"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"\n          })\n        }), \"TIP\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"E.g:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Case 1: host = test or host = dev, which is the \\\"and\\\" operation of two Posting lists\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Case 1: host != test, this is to find the Series IDs below the host and the Series IDs of host = test, and get an AntNot(Difference) operation for these two Posting lists.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At the same time, based on this inverted structure, it may support some \", _jsx(_components.strong, {\n        children: \"Metadata\"\n      }), \" queries, such as wanting to know what \", _jsx(_components.strong, {\n        children: \"Value\"\n      }), \" is under the \", _jsx(_components.strong, {\n        children: \"Tag\"\n      }), \" of \", _jsx(_components.strong, {\n        children: \"host\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Grouping\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So, if the forward data is not stored, how to solve the \", _jsx(_components.strong, {\n        children: \"Group By\"\n      }), \" operation by pressing one or several \", _jsx(_components.strong, {\n        children: \"Tag Key\"\n      }), \"? If we need to segment the \", _jsx(_components.strong, {\n        children: \"Tag Value\"\n      }), \" like \", _jsx(_components.strong, {\n        children: \"Lucene\"\n      }), \", it is basically impossible to deduce the forward data through the reverse, but in a scenario like \", _jsx(_components.strong, {\n        children: \"TSDB\"\n      }), \", we do not need to \", _jsx(_components.strong, {\n        children: \"Tag Value\"\n      }), \" **Do word segmentation, so it is still possible to reverse the forward data through the reverse data.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As shown in the figure below, the forward data of a single \", _jsx(_components.strong, {\n        children: \"Tag Key\"\n      }), \" has been restored to \", _jsx(_components.strong, {\n        children: \"Tag Key/Value => Series IDs\"\n      }), \" for easy understanding.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/design/forward_grouping.png\",\n        alt: \"Forward grouping\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's take the previous example to illustrate how to get the data of \", _jsx(_components.strong, {\n        children: \"Group By host, cpu\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"2\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"Tag Key\"\n      }), \", as shown in the figure above, in fact, as you can see from the figure, the whole operation is a merge Operation, there are \", _jsx(_components.strong, {\n        children: \"2\"\n      }), \" methods.\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Because each data is sorted, it can be sorted by \", _jsx(_components.strong, {\n          children: \"2\"\n        }), \" heaps, that is, \", _jsx(_components.strong, {\n          children: \"host\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"cpu\"\n        }), \" are placed in one heap respectively, and each time a value is taken from each heap, If the values are the same, it means that \", _jsx(_components.strong, {\n          children: \"2\"\n        }), \" is satisfied. For example, \", _jsx(_components.strong, {\n          children: \"host=dev, cpu=0\"\n        }), \" corresponding to \", _jsx(_components.strong, {\n          children: \"TSID = 0\"\n        }), \", you can find the corresponding \", _jsx(_components.strong, {\n          children: \"Group By\"\n        }), \" data, and so on, after traversing \", _jsx(_components.strong, {\n          children: \"2\"\n        }), \" The data in each heap can be finally combined. This method will occupy \", _jsx(_components.strong, {\n          children: \"CPU\"\n        }), \" and occupy less memory;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use something like \", _jsx(_components.strong, {\n          children: \"Counting Sort\"\n        }), \", that is, pre-allocate a fixed-size array, and then put \", _jsx(_components.strong, {\n          children: \"Series IDs\"\n        }), \" in the corresponding array subscript, as follows: \", _jsx(_components.strong, {\n          children: \"1\"\n        }), \" also includes \", _jsx(_components.strong, {\n          children: \"2\"\n        }), \" tags The data of Key** is what we want, and so on, you can get all the data, \", _jsx(_components.strong, {\n          children: \"CPU\"\n        }), \" occupies less, but wastes memory;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Combined with the structure of \", _jsx(_components.strong, {\n        children: \"Roaring Bitmap High/Low Container\"\n      }), \", a \", _jsx(_components.strong, {\n        children: \"Container\"\n      }), \" can have up to \", _jsx(_components.strong, {\n        children: \"65536\"\n      }), \" \", _jsx(_components.strong, {\n        children: \"uint16\"\n      }), \" values, so the memory usage can also be controlled, so we use \", _jsx(_components.strong, {\n        children: \"Counting Sort\"\n      }), \" method to The corresponding forward data is derived, and the overall process can be processed in parallel by \", _jsx(_components.strong, {\n        children: \"Container\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Reference\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://roaringbitmap.org/\",\n          children: _jsx(_components.em, {\n            children: \"RoaringBitmap\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://akumuli.org/akumuli/2017/11/17/indexing/\",\n          children: _jsx(_components.em, {\n            children: \"Akumuli Inverted Index\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Counting_sort\",\n          children: _jsx(_components.em, {\n            children: \"Counting Sort\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Trie\",\n          children: _jsx(_components.em, {\n            children: \"Trie\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Succinct_data_structure\",\n          children: _jsx(_components.em, {\n            children: \"Succinct Data Structure\"\n          })\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tocItems":[{"id":"structure","level":2,"title":"Structure"},{"id":"metadata","level":3,"title":"Metadata"},{"id":"index","level":3,"title":"Index"},{"id":"inquire","level":2,"title":"Inquire"},{"id":"filtering","level":3,"title":"Filtering"},{"id":"grouping","level":3,"title":"Grouping"}],"releases":null,"sidebar":[{"index":2,"title":"Getting Started","children":[{"index":1,"title":"Docker","children":[],"href":"/docs/lindb/getting-started/docker"},{"index":2,"title":"Package","children":[],"href":"/docs/lindb/getting-started/package"}]},{"index":3,"title":"Developer Guide","children":[{"index":1,"title":"Connect","children":[],"href":"/docs/lindb/developer-guide/connect"},{"index":2,"title":"Create a database","children":[],"href":"/docs/lindb/developer-guide/create-database"},{"index":3,"title":"Insert data","children":[],"href":"/docs/lindb/developer-guide/insert-data"},{"index":4,"title":"Query data","children":[],"href":"/docs/lindb/developer-guide/query-data"}]},{"index":4,"title":"Deployment","children":[{"index":1,"title":"Kubernetes","children":[],"href":"/docs/lindb/deployment/kubernetes"},{"index":2,"title":"Manual deployment","children":[],"href":"/docs/lindb/deployment/manual"}]},{"index":5,"title":"Client","children":[{"index":1,"title":"CLI","children":[],"href":"/docs/lindb/client/cli"},{"index":2,"title":"Client libraries","children":[],"href":"/docs/lindb/client/client-libraries"},{"index":3,"title":"Go","children":[],"href":"/docs/lindb/client/go"},{"index":4,"title":"Java","children":[],"href":"/docs/lindb/client/java"}]},{"index":6,"title":"Lin Ql","children":[{"index":1,"title":"Lin query language","children":[],"href":"/docs/lindb/lin-ql/sql"}]},{"index":7,"title":"Admin Console","children":[{"index":1,"title":"Introduction","children":[],"href":"/docs/lindb/admin-console/index"},{"index":2,"title":"Cluster overview","children":[],"href":"/docs/lindb/admin-console/overview"},{"index":3,"title":"Data search","children":[],"href":"/docs/lindb/admin-console/search"},{"index":4,"title":"Data explore","children":[],"href":"/docs/lindb/admin-console/explore"},{"index":5,"title":"Cluster monitoring","children":[],"href":"/docs/lindb/admin-console/monitoring"},{"index":6,"title":"Metadata","children":[],"href":"/docs/lindb/admin-console/metadata"}]},{"index":8,"title":"Api","children":[{"index":1,"title":"Introduction","children":[],"href":"/docs/lindb/api/index"},{"index":2,"title":"Insert","children":[],"href":"/docs/lindb/api/insert"},{"index":3,"title":"Query","children":[],"href":"/docs/lindb/api/query"},{"index":4,"title":"State","children":[],"href":"/docs/lindb/api/state"}]},{"index":9,"title":"Reference","children":[{"index":1,"title":"Data Model","children":[],"href":"/docs/lindb/reference/data-model"},{"index":2,"title":"Metric","children":[],"href":"/docs/lindb/reference/metric"},{"index":3,"title":"Configuration","children":[],"href":"/docs/lindb/reference/configuration"}]},{"index":10,"title":"Design","children":[{"index":1,"title":"Architecture","children":[],"href":"/docs/lindb/design/architecture"},{"index":2,"title":"Coordinator","children":[],"href":"/docs/lindb/design/coordinator"},{"index":3,"title":"Replication","children":[],"href":"/docs/lindb/design/replication"},{"index":4,"title":"Query","children":[],"href":"/docs/lindb/design/query"},{"index":5,"title":"Storage","children":[],"href":"/docs/lindb/design/storage"},{"index":6,"title":"Memory database","children":[],"href":"/docs/lindb/design/memory-database"},{"index":7,"title":"Inverted index","children":[],"href":"/docs/lindb/design/inverted-index"}]}],"locale":"","_nextI18Next":{"initialI18nStore":{"en":{"translation":{"Lin Ql":"Lin QL","Api":"API"}}},"initialLocale":"en","ns":["translation"],"userConfig":null}},"__N_SSG":true}