{"pageProps":{"page":{"path":"/docs/lindb/10-design/07-inverted-index.mdx","meta":{"title":"例排索引"},"title":"例排索引","parent":"Design","commitInfo":{"author":"stone1100","date":"Mon Jun 24 07:03:27 2024"}},"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    div: \"div\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    h5: \"h5\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    path: \"path\",\n    pre: \"pre\",\n    span: \"span\",\n    strong: \"strong\",\n    svg: \"svg\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"主要作用是为方便对某个 Metric 下面 Tags 的 Filtering/Grouping 操作，同时也是为了提升整体的查询效率。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"整个索引为一个倒排结构，类似 Lucene ，但是相比会更加简单，因为在时序这样的场景不需要做分词这样的操作。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"结构\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Metadata\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"主要存储 string->uint32 数据转换，类似经典的 OpenTSDB 设计思想。\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Namespace\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Namespace(string value)\"\n          }), _jsx(_components.td, {\n            children: \"Namespace ID(uint32)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Metric\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Namespace ID + Metric Name(string value)\"\n          }), _jsx(_components.td, {\n            children: \"Metric ID(uint32)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Field\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Metric ID\"\n          }), _jsx(_components.td, {\n            children: \"Field List\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"line\",\n          children: _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \"单个 Field 的结构如下：\"\n          })\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Field ID\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" 在该 Metric 下是唯一的，存储数据的时候用该 ID\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Field Name\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" 字段名\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Field Type\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" 字段类型，如 Sum/Min/Max 等\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Tag key\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Metric ID\"\n          }), _jsx(_components.td, {\n            children: \"Tag Key List\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"shiki shiki-themes material-theme-lighter catppuccin-macchiato language-yaml\",\n      style: {\n        backgroundColor: \"#FAFAFA\",\n        \"--shiki-dark-bg\": \"#1e293b\",\n        color: \"#90A4AE\",\n        \"--shiki-dark\": \"#cad3f5\"\n      },\n      tabIndex: \"0\",\n      children: _jsxs(_components.code, {\n        className: \"language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"line\",\n          children: _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \"单个 Tag Key 的结构如下：\"\n          })\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Tag Key ID\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \":\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" 在该 Database 下是唯一的，存储 Index 的时候用该 ID\"\n          })]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"line\",\n          children: [_jsx(_components.span, {\n            style: {\n              color: \"#E53935\",\n              \"--shiki-dark\": \"#8AADF4\"\n            },\n            children: \"Tag Key\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#39ADB5\",\n              \"--shiki-dark\": \"#8BD5CA\"\n            },\n            children: \" :\"\n          }), _jsx(_components.span, {\n            style: {\n              color: \"#91B859\",\n              \"--shiki-dark\": \"#A6DA95\"\n            },\n            children: \" Tag Key(string value)\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"line\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Tag value\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Tag Key ID\"\n          }), _jsx(_components.td, {\n            children: \"Tag Values Trie\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中 Tag Value 以 Trie 结构存储该 Tag Key 下所有的 Tag Value 的值，同时通过 Trie 的结构为每个 Tag Value 生成一个该 Tag Key 下唯一的 Tag Value ID 。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Index\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由于在 Metadata 中已经做了 string->uint32 的操作，因此在 Index 中其实都是按数字来存储，进一步减少存储空间。\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Forward\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Series IDs(Roaring Bitmap)\"\n          }), _jsx(_components.td, {\n            children: \"Tag Value IDs(Array)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"markdown-alert markdown-alert-tip\",\n      dir: \"auto\",\n      children: [\"\\n\", _jsxs(_components.p, {\n        className: \"markdown-alert-title\",\n        dir: \"auto\",\n        children: [_jsx(_components.svg, {\n          className: \"octicon\",\n          viewBox: \"0 0 16 16\",\n          width: \"16\",\n          height: \"16\",\n          \"aria-hidden\": \"true\",\n          children: _jsx(_components.path, {\n            d: \"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"\n          })\n        }), \"TIP\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Forward Index 和传统的索引有所不同，传统索引会把每一条写入的数据当成一个正向记录存储下来，对应时序里面就是一条条的 Time Series 对应的 Tags，而这些 Tags 经过 Metadata 里面的 string->uint32 转换之后，都变成了一串数据，所以可以把这些数据都压缩到一条 Forward Index 中。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Inverted\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Tag Value ID\"\n          }), _jsx(_components.td, {\n            children: \"Series IDs(Roaring Bitmap)\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"查询\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"下面以一个例子的方式来说明 Filtering/Grouping 。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Filtering\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如下表为一个 Metric(cpu) 下面 Tags 对应的正向数据，有 3 个 Tags 分别为 host/cpu/type\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Tags\"\n          }), _jsx(_components.th, {\n            children: \"Series ID\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=0 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"1\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=1 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"2\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=0 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"3\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev cpu=1 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"4\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=0 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"5\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=1 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"6\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=2 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"7\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=3 type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"8\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=0 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"9\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=1 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"10\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=2 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"11\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test cpu=3 type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"12\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果把上表的数据，倒排一下，就形成了如下表的倒排结构，Posting List 直接用 Roaring Bitmap 来存储。\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Tag\"\n          }), _jsx(_components.th, {\n            children: \"Posting List\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=dev\"\n          }), _jsx(_components.td, {\n            children: \"1, 2, 3, 4\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"host=test\"\n          }), _jsx(_components.td, {\n            children: \"5, 6, 7, 8, 9, 10, 11, 12\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=0\"\n          }), _jsx(_components.td, {\n            children: \"1, 3, 5, 9\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=1\"\n          }), _jsx(_components.td, {\n            children: \"2, 4, 6, 10\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=2\"\n          }), _jsx(_components.td, {\n            children: \"7, 11\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cpu=3\"\n          }), _jsx(_components.td, {\n            children: \"8, 12\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"type=SCHED\"\n          }), _jsx(_components.td, {\n            children: \"1, 2, 5, 6, 7, 8\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"type=TIMER\"\n          }), _jsx(_components.td, {\n            children: \"3, 4, 9, 10, 11, 12\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"同时对 Tag 下面的 Tag Values 以前缀树的方式存储，以方便对 Tag Value 做过滤操作，如 host like dev* 这样的前缀过滤操作。加上上面的倒排结构之后，对于条件过滤操作就非常方便，如多个条件的操作只需要对多个 Posting List 做\", _jsx(_components.strong, {\n        children: \"与\"\n      }), \"/\", _jsx(_components.strong, {\n        children: \"或\"\n      }), \"操作即可，基本可以满足日常多个条件的 And/Or/Not 这样的过滤操作。\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"markdown-alert markdown-alert-tip\",\n      dir: \"auto\",\n      children: [\"\\n\", _jsxs(_components.p, {\n        className: \"markdown-alert-title\",\n        dir: \"auto\",\n        children: [_jsx(_components.svg, {\n          className: \"octicon\",\n          viewBox: \"0 0 16 16\",\n          width: \"16\",\n          height: \"16\",\n          \"aria-hidden\": \"true\",\n          children: _jsx(_components.path, {\n            d: \"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"\n          })\n        }), \"TIP\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"例如：\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Case 1:  host = test or host = dev，就是 2 个 Posting list 的 ”与“ 操作\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Case 1:  host != test，这种就是找到 host 下面所的 Series IDs 和 host = test 的 Series IDs，把这 2 个 Posting list 求一个 AntNot(Difference) 操作即可\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"同时基于这个倒排结构可能支持一些 Metadata 的查询，如想知道 host 这个 Tag 下面有哪些 Value 等。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Grouping\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"那么，如果不存储正向数据，怎么来解决按某个或者某几个 Tag Key 的 Group By 操作呢？如果我们像 Lucene 一样需要对 Tag Value 做分词的话，基本上是做不到通过反向来推导出正向的数据，但是在 TSDB 这样的场景里面，我们不需要对 Tag Value 做分词处理，所以还是可以通过反向的数据来反推出来正向的数据的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如下图，已经把单条 Tag Key 的正向数据重新还原成 Tag Key/Value => Series IDs ，以方便理解。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/design/forward_grouping.png\",\n        alt: \"基于正向索引反推原始 Tag 组合\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"下面还是拿之前那个例子来说明，怎么来拿到 Group By host,cpu 这 2 个 Tag Key 的数据，如上图所示，其实从图中可以看到，整个操作就是一个归并操作，有 2 种做法。\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"因为每个数据都是排好序的，所以可以用 2 个堆来排序，即 host 和 cpu 分别放在一个堆里面，每次从每个堆里面取一个值，如果值相同，说明 2 者都满足，如 TSID = 0 对应的 host=dev,cpu=0 ，即可以找到相应的 Group By 数据，以此类推，遍历完 2 个堆里面的数据，就可以得到最终的结合，该方式会占用 CPU ，内存占用少；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"使用类似 Counting Sort ，即预先分配好一个固定大小的数组，然后把 Series IDs 放在相应的数组下标里面，如下标为 1 中同时包括了 2 个 Tag Key 的数据，即是我们想要的，以此类推，可以拿到所有的数据， CPU 占用少，但是浪费内存；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"再结合，Roaring Bitmap High/Low Container 的结构，一个 Container 里最多可以有 65536 个 uint16 值，所以内存的占用也可以得到控制，所以我们采用 Counting Sort 的方式来推导对应的正向数据，并且整体过程可以按一个个 Container 来并行处理。\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"参考引用\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://roaringbitmap.org/\",\n          children: \"RoaringBitmap\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://akumuli.org/akumuli/2017/11/17/indexing/\",\n          children: \"Akumuli Inverted Index\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Counting_sort\",\n          children: \"Counting Sort\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Trie\",\n          children: \"Trie\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Succinct_data_structure\",\n          children: \"Succinct Data Structure\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tocItems":[{"id":"结构","level":2,"title":"结构"},{"id":"metadata","level":3,"title":"Metadata"},{"id":"index","level":3,"title":"Index"},{"id":"查询","level":2,"title":"查询"},{"id":"filtering","level":3,"title":"Filtering"},{"id":"grouping","level":3,"title":"Grouping"}],"releases":null,"sidebar":[{"index":2,"title":"Getting Started","children":[{"index":1,"title":"Docker","children":[],"href":"/docs/lindb/getting-started/docker"},{"index":2,"title":"安装包","children":[],"href":"/docs/lindb/getting-started/package"}]},{"index":3,"title":"Developer Guide","children":[{"index":1,"title":"建立连接","children":[],"href":"/docs/lindb/developer-guide/connect"},{"index":2,"title":"创建数据库","children":[],"href":"/docs/lindb/developer-guide/create-database"},{"index":3,"title":"写入数据","children":[],"href":"/docs/lindb/developer-guide/insert-data"},{"index":4,"title":"查询数据","children":[],"href":"/docs/lindb/developer-guide/query-data"}]},{"index":4,"title":"Deployment","children":[{"index":1,"title":"Kubernetes","children":[],"href":"/docs/lindb/deployment/kubernetes"},{"index":2,"title":"手动部署","children":[],"href":"/docs/lindb/deployment/manual"}]},{"index":5,"title":"Client","children":[{"index":1,"title":"CLI","children":[],"href":"/docs/lindb/client/cli"},{"index":2,"title":"客户端 SDK","children":[],"href":"/docs/lindb/client/client-libraries"},{"index":3,"title":"Go","children":[],"href":"/docs/lindb/client/go"},{"index":4,"title":"Java","children":[],"href":"/docs/lindb/client/java"}]},{"index":6,"title":"Lin Ql","children":[{"index":1,"title":"SQL","children":[],"href":"/docs/lindb/lin-ql/sql"}]},{"index":7,"title":"Admin Console","children":[{"index":1,"title":"简介","children":[],"href":"/docs/lindb/admin-console/index"},{"index":2,"title":"集群状态","children":[],"href":"/docs/lindb/admin-console/overview"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/admin-console/search"},{"index":4,"title":"数据浏览","children":[],"href":"/docs/lindb/admin-console/explore"},{"index":5,"title":"监控","children":[],"href":"/docs/lindb/admin-console/monitoring"},{"index":6,"title":"元数据","children":[],"href":"/docs/lindb/admin-console/metadata"}]},{"index":8,"title":"Api","children":[{"index":1,"title":"介绍","children":[],"href":"/docs/lindb/api/index"},{"index":2,"title":"数据写入","children":[],"href":"/docs/lindb/api/insert"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/api/query"},{"index":4,"title":"集群状态","children":[],"href":"/docs/lindb/api/state"}]},{"index":9,"title":"Reference","children":[{"index":1,"title":"数据模型","children":[],"href":"/docs/lindb/reference/data-model"},{"index":2,"title":"Metric","children":[],"href":"/docs/lindb/reference/metric"},{"index":3,"title":"配置参数","children":[],"href":"/docs/lindb/reference/configuration"}]},{"index":10,"title":"Design","children":[{"index":1,"title":"架构","children":[],"href":"/docs/lindb/design/architecture"},{"index":2,"title":"集群协调","children":[],"href":"/docs/lindb/design/coordinator"},{"index":3,"title":"数据复制","children":[],"href":"/docs/lindb/design/replication"},{"index":4,"title":"查询","children":[],"href":"/docs/lindb/design/query"},{"index":5,"title":"存储","children":[],"href":"/docs/lindb/design/storage"},{"index":6,"title":"内存数据库","children":[],"href":"/docs/lindb/design/memory-database"},{"index":7,"title":"例排索引","children":[],"href":"/docs/lindb/design/inverted-index"}]}],"locale":"zh","_nextI18Next":{"initialI18nStore":{"zh":{"translation":{"A lightweight, observability pipeline":"轻量级数据处理平台","A single server could easily support more than one million write TPS.":"机支持百万以上TPS写入；","Admin Console":"控制台","All-in-one observability platform":"一站式可观测平台","An open-source, cloud native, horizontally scalable, distributed time-series database.":"一款开源分布式时序数据库，具有高性能、高可用性和水平扩展性","An open-source, cloud native, observabilty platform":"云原生开源可观测平台","Architecture":"整体架构","Ask a Question":"提问","Auto Rollup":"自动 Rollup","Bug report":"发现 Bug","Client":"客户端","Cross Multiple IDCs":"跨多数据中心","Deployment":"集群部署","Design":"设计","Developer Guide":"开发手册","Distributed time-series database":"分布式时序数据库","Docs":"文档","Documentation":"文档","Downloads":"下载","Easy to use":"简单易用","Edit this page on Github":"在 GitHub 上编辑此页","Feature request":"新需求","Get Help":"获取帮助","Getting Started":"快速开始","High availability":"高可用","High performance":"高性能","Horizontal scalability":"水平扩展","Horizontal scalable is made simple by adding more new broker and storage nodes without too much thinking and manual operations Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Tags 级别的 Sharding 机制，可将任一 Metric 数据充分分散到多个存储节点；","Insert data":"数据写入","Inside LinDB":"技术内幕","Introduction":"介绍","Inverted index":"例排索引","Key Features":"主要功能","Learn More":"更多","License":"许可证","LinDB is designed to work under a Multi-Active IDCs cloud architecture. The compute layer of LinDB, called brokers, supports efficient Multi-IDCs aggregation query.":"支持各数据中心写入，多数据中心查询聚合；","LinDB supports rollup in specific intervals(minute, hour and day) automatically after creating the database(unlike the Continuous-Query of InfluxDB).":"支持秒级数据写入后自动Rollup到分钟、小时和天的粒度，无需人工介入（如 InfluxDB Continuous-Query）；","On this page":"本页导航","Open source":"开源","Query data":"数据查询","Read the installation guide for more information":{"":"查看安装手册了解更多信息。"},"Reference":"参考手册","Release Date":"发布时间","Release Note":"发布日志","Releases":"变更日志","Resources":"资源","Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Metric + Tags + Fields 的方式，无需提前定义 Schema；","Storage":"存储","Tags-based sharding strategy resolves the hotspot problem":"充分解决热点问题，可通过增加服务器数量线性增加处理能力；","The LinQL is flexible yet handy for real-time data analytics.":"可通过 LinQL 进行实时数据分析；","The multi-channel replication protocol supports any amount of nodes, ensures the system availability.":"独创的多通道复制协议支持任意节点数的多副本机制，可保证整个服务的高可用性；","This page could not be found":"找不到此页面","Uncompress":"解压","Version":"版本","View on GitHub":"GitHub","What's LinDB?":"什么是 LinDB？","What's New in":"","Why LinDB?":"为什么选择 LinDB？","With fundamental techniques like efficient compression storage and parallel computing, LinDB delivers highly optimized query performance.":"高效的数据压缩与多节点的并行查询与计算，专注查询性能优化；"}},"en":{"translation":{"Lin Ql":"Lin QL","Api":"API"}}},"initialLocale":"zh","ns":["translation"],"userConfig":null}},"__N_SSG":true}