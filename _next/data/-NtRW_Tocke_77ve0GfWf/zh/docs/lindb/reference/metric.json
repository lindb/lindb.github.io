{"pageProps":{"page":{"path":"/docs/lindb/09-reference/02-metric.mdx","meta":{"title":"内部监控指标","sidebar":"Metric"},"title":"Metric","parent":"Reference","commitInfo":{"author":"stone1100","date":"Mon Jun 24 07:03:27 2024"}},"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    div: \"div\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    path: \"path\",\n    strong: \"strong\",\n    svg: \"svg\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"LinDB 各组件提供了自监控指标以帮助用户了解其运行状态，本文主要对各项指标进行详细说明。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"LinDB 默认会定期把自监控的指标数据存储在 \", _jsx(_components.strong, {\n        children: \"_internal\"\n      }), \" 这个数据库下。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"主要分为如下几类指标：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/lindb/reference/metric#%E9%80%9A%E7%94%A8\",\n          children: \"通用\"\n        }), \": 通用指标，如CPU、Mem、网络等，适用与 Root、Broker、Storage；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/lindb/reference/metric#broker\",\n          children: \"Broker\"\n        }), \": Broker 内部监控指标；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/lindb/reference/metric#storage\",\n          children: \"Storage\"\n        }), \": Storage 内部监控指标；\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所有的指标都会打上如下标签：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"node: 组件所在节点；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"markdown-alert markdown-alert-tip\",\n      dir: \"auto\",\n      children: [\"\\n\", _jsxs(_components.p, {\n        className: \"markdown-alert-title\",\n        dir: \"auto\",\n        children: [_jsx(_components.svg, {\n          className: \"octicon\",\n          viewBox: \"0 0 16 16\",\n          width: \"16\",\n          height: \"16\",\n          \"aria-hidden\": \"true\",\n          children: _jsx(_components.path, {\n            d: \"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"\n          })\n        }), \"TIP\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"由于 LinDB 支持一个计算集群(Broker)下可以管理多个存储集群(Storage)，为了更好的区分存储集群，针对 Storage\\n下面的指标额外增外了 \", _jsx(_components.strong, {\n          children: \"namesapce\"\n        }), \" 以区分是哪个存储集群。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"通用\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Go Runtimee\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.runtime\"\n          }), _jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"go_goroutines\"\n          }), _jsx(\"td\", {\n            children: \"the number of goroutines\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"go_threads\"\n          }), _jsx(\"td\", {\n            children: \"the number of records in the thread creation profile\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"24\",\n            children: \"lindb.runtime.mem\"\n          }), _jsx(\"td\", {\n            rowspan: \"24\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"alloc\"\n          }), _jsx(\"td\", {\n            children: \"bytes of allocated heap objects\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"total_alloc\"\n          }), _jsx(\"td\", {\n            children: \"cumulative bytes allocated for heap objects\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"sys\"\n          }), _jsx(\"td\", {\n            children: \"the total bytes of memory obtained from the OS\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lookups\"\n          }), _jsx(\"td\", {\n            children: \"the number of pointer lookups performed by the runtime\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"mallocs\"\n          }), _jsx(\"td\", {\n            children: \"the cumulative count of heap objects allocated\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"frees\"\n          }), _jsx(\"td\", {\n            children: \"the cumulative count of heap objects freed\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"heap_alloc\"\n          }), _jsx(\"td\", {\n            children: \"bytes of allocated heap objects\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"heap_sys\"\n          }), _jsx(\"td\", {\n            children: \"bytes of heap memory obtained from the OS\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"heap_idle\"\n          }), _jsx(\"td\", {\n            children: \"bytes in idle (unused) spans\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"heap_inuse\"\n          }), _jsx(\"td\", {\n            children: \"bytes in in-use spans\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"heap_released\"\n          }), _jsx(\"td\", {\n            children: \"bytes of physical memory returned to the OS\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"heap_objects\"\n          }), _jsx(\"td\", {\n            children: \"the number of allocated heap objects\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"stack_inuse\"\n          }), _jsx(\"td\", {\n            children: \"bytes in stack spans\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"stack_sys\"\n          }), _jsx(\"td\", {\n            children: \"bytes of stack memory obtained from the OS\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"mspan_inuse\"\n          }), _jsx(\"td\", {\n            children: \"bytes of allocated mspan structures\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"mspan_sys\"\n          }), _jsx(\"td\", {\n            children: \"bytes of memory obtained from the OS for mspan\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"mcache_inuse\"\n          }), _jsx(\"td\", {\n            children: \"bytes of allocated mcache structures\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"mcache_sys\"\n          }), _jsx(\"td\", {\n            children: \"bytes of memory obtained from the OS for mcache structures\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"buck_hash_sys\"\n          }), _jsx(\"td\", {\n            children: \"bytes of memory in profiling bucket hash tables\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gc_sys\"\n          }), _jsx(\"td\", {\n            children: \"bytes of memory in garbage collection metadata\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"other_sys\"\n          }), _jsx(\"td\", {\n            children: \"bytes of memory in miscellaneous off-heap\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"next_gc\"\n          }), _jsx(\"td\", {\n            children: \"the target heap size of the next GC cycle\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"last_gc\"\n          }), _jsx(\"td\", {\n            children: \"the time the last garbage collection finished\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gc_cpu_fraction\"\n          }), _jsx(\"td\", {\n            children: \"the fraction of this program's available  CPU time used by the GC since the program started\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"System\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"8\",\n            children: \"lindb.monitor.system.cpu_stat\"\n          }), _jsx(\"td\", {\n            rowspan: \"8\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"idle\"\n          }), _jsx(\"td\", {\n            children: \"CPU time that's not actively being used\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"nice\"\n          }), _jsx(\"td\", {\n            children: \"CPU time used by processes that have a positive niceness\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"system\"\n          }), _jsx(\"td\", {\n            children: \"CPU time used by the kernel\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"user\"\n          }), _jsx(\"td\", {\n            children: \"CPU time used by user space processes\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"irq\"\n          }), _jsx(\"td\", {\n            children: \"Interrupt Requests\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"steal\"\n          }), _jsx(\"td\", {\n            children: \"The percentage of time a virtual CPU waits for a real CPU\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"softirq\"\n          }), _jsx(\"td\", {\n            children: \"The kernel is servicing interrupt requests (IRQs)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"iowait\"\n          }), _jsx(\"td\", {\n            children: \"It marks time spent waiting for input or output operations\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"lindb.monitor.system.mem_stat\"\n          }), _jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"total\"\n          }), _jsx(\"td\", {\n            children: \"Total amount of RAM on this system\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"used\"\n          }), _jsx(\"td\", {\n            children: \"RAM used by programs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"free\"\n          }), _jsx(\"td\", {\n            children: \"Free RAM\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"usage\"\n          }), _jsx(\"td\", {\n            children: \"Percentage of RAM used by programs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"lindb.monitor.system.disk_usage_stats\"\n          }), _jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"total\"\n          }), _jsx(\"td\", {\n            children: \"Total amount of disk\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"used\"\n          }), _jsx(\"td\", {\n            children: \"Disk used by programs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"free\"\n          }), _jsx(\"td\", {\n            children: \"Free disk\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"usage\"\n          }), _jsx(\"td\", {\n            children: \"Percentage of disk used by programs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"lindb.monitor.system.disk_inodes_stats\"\n          }), _jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"total\"\n          }), _jsx(\"td\", {\n            children: \"Total amount of inode\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"used\"\n          }), _jsx(\"td\", {\n            children: \"INode used by programs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"free\"\n          }), _jsx(\"td\", {\n            children: \"Free inode\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"usage\"\n          }), _jsx(\"td\", {\n            children: \"Percentage of inode used by programs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"8\",\n            children: \"lindb.monitor.system.net_stat\"\n          }), _jsx(\"td\", {\n            rowspan: \"8\",\n            children: \"interface\"\n          }), _jsx(\"td\", {\n            children: \"bytes_sent\"\n          }), _jsx(\"td\", {\n            children: \"number of bytes sent\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"bytes_recv\"\n          }), _jsx(\"td\", {\n            children: \"number of bytes received\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"packets_sent\"\n          }), _jsx(\"td\", {\n            children: \"number of packets sent\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"packets_recv\"\n          }), _jsx(\"td\", {\n            children: \"number of packets received\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"errin\"\n          }), _jsx(\"td\", {\n            children: \"total number of errors while receiving\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"errout\"\n          }), _jsx(\"td\", {\n            children: \"total number of errors while sending\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"dropin\"\n          }), _jsx(\"td\", {\n            children: \"total number of incoming packets which were dropped\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"dropout\"\n          }), _jsx(\"td\", {\n            children: \"total number of outgoing packets which were dropped (always 0 on OSX and BSD)\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Network\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"11\",\n            children: \"lindb.traffic.tcp\"\n          }), _jsx(\"td\", {\n            rowspan: \"11\",\n            children: \"addr\"\n          }), _jsx(\"td\", {\n            children: \"accept_conns\"\n          }), _jsx(\"td\", {\n            children: \"accept total count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"accept_failures\"\n          }), _jsx(\"td\", {\n            children: \"accept failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"active_conns\"\n          }), _jsx(\"td\", {\n            children: \"current active connections\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reads\"\n          }), _jsx(\"td\", {\n            children: \"read total count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"read_bytes\"\n          }), _jsx(\"td\", {\n            children: \"read byte size\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"read_failures\"\n          }), _jsx(\"td\", {\n            children: \"read failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"writes\"\n          }), _jsx(\"td\", {\n            children: \"write total count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_bytes\"\n          }), _jsx(\"td\", {\n            children: \"write byte size\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_failures\"\n          }), _jsx(\"td\", {\n            children: \"write failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"close_conns\"\n          }), _jsx(\"td\", {\n            children: \"close total count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"close_failures\"\n          }), _jsx(\"td\", {\n            children: \"close failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_client.unary\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"failures\"\n          }), _jsx(\"td\", {\n            children: \"grpc unary client handle msg failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_client.unary.duration\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"grpc unary client handle msg duration\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_server.unary\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"failures\"\n          }), _jsx(\"td\", {\n            children: \"grpc unary server handle msg failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_server.unary.duration\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"grpc unary server handle msg duration\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.traffic.grpc_client.stream\"\n          }), _jsxs(\"td\", {\n            rowspan: \"2\",\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"msg_received_failures\"\n          }), _jsx(\"td\", {\n            children: \"grpc cliet receive msg failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"msg_sent_failures\"\n          }), _jsx(\"td\", {\n            children: \"grpc cliet send msg failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_client.stream.received_duration\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"grpc client receive msg duration, include receive total count/handle duration\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_client.stream.sent_duration\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"grpc client send msg duration, include send total count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.traffic.grpc_server.stream\"\n          }), _jsxs(\"td\", {\n            rowspan: \"2\",\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"msg_received_failures\"\n          }), _jsx(\"td\", {\n            children: \"grpc server receive msg failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"msg_sent_failures\"\n          }), _jsx(\"td\", {\n            children: \"grpc server send msg failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_server.stream.received_duration\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"grpc server receive msg duration, include receive total count/handle duration\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_server.stream.sent_duration\"\n          }), _jsxs(\"td\", {\n            children: [\"grpc_service\", _jsx(\"br\", {}), \"grpc_service\", _jsx(\"br\", {}), \"grpc_method\"]\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"grpc server send msg duration, include send total count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.traffic.grpc_server\"\n          }), _jsx(\"td\", {\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"panics\"\n          }), _jsx(\"td\", {\n            children: \"panic when grpc server handle request\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Concurrent\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"6\",\n            children: \"lindb.concurrent.pool\"\n          }), _jsx(\"td\", {\n            rowspan: \"6\",\n            children: \"pool_name\"\n          }), _jsx(\"td\", {\n            children: \"workers_alive\"\n          }), _jsx(\"td\", {\n            children: \"current workers count in use\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"workers_created\"\n          }), _jsx(\"td\", {\n            children: \"workers created count since start\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"workers_killed\"\n          }), _jsx(\"td\", {\n            children: \"workers killed count since start\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"tasks_consumed\"\n          }), _jsx(\"td\", {\n            children: \"workers consumed count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"tasks_rejected\"\n          }), _jsx(\"td\", {\n            children: \"workers rejected count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"tasks_panic\"\n          }), _jsx(\"td\", {\n            children: \"workers execute panic count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.concurrent.pool.tasks_waiting_duration\"\n          }), _jsx(\"td\", {\n            children: \"pool_name\"\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"task waiting time\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.concurrent.pool.tasks_executing_duration\"\n          }), _jsx(\"td\", {\n            children: \"pool_name\"\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"task executing time with waiting period\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"3\",\n            children: \"lindb.concurrent.limit\"\n          }), _jsx(\"td\", {\n            rowspan: \"3\",\n            children: \"type\"\n          }), _jsx(\"td\", {\n            children: \"throttle_requests\"\n          }), _jsx(\"td\", {\n            children: \"number of reaches the max-concurrency\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"timeout_requests\"\n          }), _jsx(\"td\", {\n            children: \"number pending and then timeout\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"processed\"\n          }), _jsx(\"td\", {\n            children: \"number of processed requests\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Coordinator\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"3\",\n            children: \"lindb.coordinator.state_manager\"\n          }), _jsx(\"td\", {\n            rowspan: \"3\",\n            children: \"type,coordinator\"\n          }), _jsx(\"td\", {\n            children: \"handle_events\"\n          }), _jsx(\"td\", {\n            children: \"handle coordinator event success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"handle_event_failures\"\n          }), _jsx(\"td\", {\n            children: \"handle coordinator event failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"panics\"\n          }), _jsx(\"td\", {\n            children: \"panic count whne handle coordinator event\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Query\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"适用与 Root、Broker。\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"5\",\n            children: \"lindb.query\"\n          }), _jsx(\"td\", {\n            rowspan: \"5\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"created_tasks\"\n          }), _jsx(\"td\", {\n            children: \"create query tasks\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"alive_tasks\"\n          }), _jsx(\"td\", {\n            children: \"current executing tasks(alive)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"expire_tasks\"\n          }), _jsx(\"td\", {\n            children: \"task expire, long-term no response\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"emitted_responses\"\n          }), _jsx(\"td\", {\n            children: \"emit response to parent node\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"omitted_responses\"\n          }), _jsx(\"td\", {\n            children: \"omit response because task evicted\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"lindb.task.transport\"\n          }), _jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"sent_requests\"\n          }), _jsx(\"td\", {\n            children: \"send request successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"sent_requests_failures\"\n          }), _jsx(\"td\", {\n            children: \"send request failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"sent_responses\"\n          }), _jsx(\"td\", {\n            children: \"send response successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"sent_responses_failures\"\n          }), _jsx(\"td\", {\n            children: \"send response successfully\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Broker\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.master.shard.leader\"\n          }), _jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"elections\"\n          }), _jsx(\"td\", {\n            children: \"shard leader elect successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"elect_failures\"\n          }), _jsx(\"td\", {\n            children: \"shard leader elect failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"lindb.master.controller\"\n          }), _jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"failovers\"\n          }), _jsx(\"td\", {\n            children: \"master fail over successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"failover_failures\"\n          }), _jsx(\"td\", {\n            children: \"master fail over failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reassigns\"\n          }), _jsx(\"td\", {\n            children: \"master reassign successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reassign_failures\"\n          }), _jsx(\"td\", {\n            children: \"master reassign failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.http.ingest_duration\"\n          }), _jsx(\"td\", {\n            children: \"path\"\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"ingest duration(include count)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"lindb.ingestion.proto\"\n          }), _jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"data_corrupted\"\n          }), _jsx(\"td\", {\n            children: \"corrupted when parse\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"ingested_metrics\"\n          }), _jsx(\"td\", {\n            children: \"ingested metrics\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"read_bytes\"\n          }), _jsx(\"td\", {\n            children: \"read data bytes\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"dropped_metrics\"\n          }), _jsx(\"td\", {\n            children: \"drop metrics when append\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"5\",\n            children: \"lindb.ingestion.flat\"\n          }), _jsx(\"td\", {\n            rowspan: \"4\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"data_corrupted\"\n          }), _jsx(\"td\", {\n            children: \"corrupted when parse\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"ingested_metrics\"\n          }), _jsx(\"td\", {\n            children: \"ingested metrics\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"read_bytes\"\n          }), _jsx(\"td\", {\n            children: \"read data bytes\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"dropped_metrics\"\n          }), _jsx(\"td\", {\n            children: \"drop metrics when append\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"size\"\n          }), _jsx(\"td\", {\n            children: \"block\"\n          }), _jsx(\"td\", {\n            children: \"read data block size\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"6\",\n            children: \"lindb.ingestion.influx\"\n          }), _jsx(\"td\", {\n            rowspan: \"6\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"data_corrupted\"\n          }), _jsx(\"td\", {\n            children: \"corrupted when parse\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"ingested_metrics\"\n          }), _jsx(\"td\", {\n            children: \"ingested metrics\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"ingested_fields\"\n          }), _jsx(\"td\", {\n            children: \"ingested fields\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"read_bytes\"\n          }), _jsx(\"td\", {\n            children: \"read data bytes\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"dropped_metrics\"\n          }), _jsx(\"td\", {\n            children: \"drop metrics when append\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"dropped_fields\"\n          }), _jsx(\"td\", {\n            children: \"drop fields when append\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.broker.database.write\"\n          }), _jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"db\"\n          }), _jsx(\"td\", {\n            children: \"out_of_time_range\"\n          }), _jsx(\"td\", {\n            children: \"timestamp of metrics out of acceptable write time range\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"shard_not_found\"\n          }), _jsx(\"td\", {\n            children: \"shard not found count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"14\",\n            children: \"lindb.broker.family.write\"\n          }), _jsx(\"td\", {\n            rowspan: \"14\",\n            children: \"db\"\n          }), _jsx(\"td\", {\n            children: \"active_families\"\n          }), _jsx(\"td\", {\n            children: \"number of current active replica family channel\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"batch_metrics\"\n          }), _jsx(\"td\", {\n            children: \"batch into memory chunk success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"batch_metrics_failures\"\n          }), _jsx(\"td\", {\n            children: \"batch into memory chunk failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"pending_send\"\n          }), _jsx(\"td\", {\n            children: \"number of pending send message\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"send_success\"\n          }), _jsx(\"td\", {\n            children: \"send message success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"send_failures\"\n          }), _jsx(\"td\", {\n            children: \"send message failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"send_size\"\n          }), _jsx(\"td\", {\n            children: \"bytes of send message\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"retry\"\n          }), _jsx(\"td\", {\n            children: \"retry count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"retry_drop\"\n          }), _jsx(\"td\", {\n            children: \"number of drop message after too many retry\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"create_stream\"\n          }), _jsx(\"td\", {\n            children: \"create replica stream success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"create_stream_failures\"\n          }), _jsx(\"td\", {\n            children: \"create replica stream failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"close_stream\"\n          }), _jsx(\"td\", {\n            children: \"close replica stream success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"close_stream_failures\"\n          }), _jsx(\"td\", {\n            children: \"close replica stream failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"leader_changed\"\n          }), _jsx(\"td\", {\n            children: \"shard leader changed\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Storage\"\n    }), \"\\n\", _jsxs(\"table\", {\n      children: [_jsx(\"thead\", {\n        children: _jsxs(\"tr\", {\n          children: [_jsx(\"th\", {\n            children: \"Metric Name\"\n          }), _jsx(\"th\", {\n            children: \"Tags\"\n          }), _jsx(\"th\", {\n            children: \"Fields\"\n          }), _jsx(\"th\", {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(\"tbody\", {\n        children: [_jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"6\",\n            children: \"lindb.storage.wal\"\n          }), _jsxs(\"td\", {\n            rowspan: \"6\",\n            children: [\"db\", _jsx(\"br\", {}), \"shard\"]\n          }), _jsx(\"td\", {\n            children: \"receive_write_bytes\"\n          }), _jsx(\"td\", {\n            children: \"receive write request bytes(broker->leader)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_wal\"\n          }), _jsx(\"td\", {\n            children: \"write wal successfully(broker->leader)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_wal_failures\"\n          }), _jsx(\"td\", {\n            children: \"write wal failure(broker->leader)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"receive_replica_bytes\"\n          }), _jsx(\"td\", {\n            children: \"receive replica request bytes(storage leader->follower\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replica_wal\"\n          }), _jsx(\"td\", {\n            children: \"replica wal successfully(storage leader->follower)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replica_wal_failures\"\n          }), _jsx(\"td\", {\n            children: \"replica wal failure(storage leader->follower)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"7\",\n            children: \"lindb.storage.replicator.runner\"\n          }), _jsxs(\"td\", {\n            rowspan: \"7\",\n            children: [\"type\", _jsx(\"br\", {}), \"db\", _jsx(\"br\", {}), \"shard\"]\n          }), _jsx(\"td\", {\n            children: \"active_replicators\"\n          }), _jsx(\"td\", {\n            children: \"number of current active local replicators\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replica_panics\"\n          }), _jsx(\"td\", {\n            children: \"replica panic count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"consume_msg\"\n          }), _jsx(\"td\", {\n            children: \"get message successfully count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"consume_msg_failures\"\n          }), _jsx(\"td\", {\n            children: \"get message failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replica_lag\"\n          }), _jsx(\"td\", {\n            children: \"replica lag message count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replica_bytes\"\n          }), _jsx(\"td\", {\n            children: \"bytes of replica data\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replicas\"\n          }), _jsx(\"td\", {\n            children: \"replica success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"5\",\n            children: \"lindb.storage.replica.local\"\n          }), _jsxs(\"td\", {\n            rowspan: \"5\",\n            children: [\"db\", _jsx(\"br\", {}), \"shard\"]\n          }), _jsx(\"td\", {\n            children: \"decompress_failures\"\n          }), _jsx(\"td\", {\n            children: \"decompress message failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replica_failures\"\n          }), _jsx(\"td\", {\n            children: \"replica failure count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"replica_rows\"\n          }), _jsx(\"td\", {\n            children: \"row number of replica\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"ack_sequence\"\n          }), _jsx(\"td\", {\n            children: \"ack persist sequence count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"invalid_sequence\"\n          }), _jsx(\"td\", {\n            children: \"invalid replica sequence count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"20\",\n            children: \"lindb.storage.replica.remote\"\n          }), _jsxs(\"td\", {\n            rowspan: \"20\",\n            children: [\"db\", _jsx(\"br\", {}), \"shard\"]\n          }), _jsx(\"td\", {\n            children: \"not_ready\"\n          }), _jsx(\"td\", {\n            children: \"remote replicator channel not ready\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"follower_offline\"\n          }), _jsx(\"td\", {\n            children: \"remote follower node offline\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"need_close_last_stream\"\n          }), _jsx(\"td\", {\n            children: \"need close last stream, when do re-connection\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"close_last_stream_failures\"\n          }), _jsx(\"td\", {\n            children: \"close last stream failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"create_replica_cli\"\n          }), _jsx(\"td\", {\n            children: \"create replica client successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"create_replica_cli_failures\"\n          }), _jsx(\"td\", {\n            children: \"create replica client failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"create_replica_stream\"\n          }), _jsx(\"td\", {\n            children: \"create replica stream successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"create_replica_stream_failures\"\n          }), _jsx(\"td\", {\n            children: \"create replica stream failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"get_last_ack_failures\"\n          }), _jsx(\"td\", {\n            children: \"get last ack sequence from remote follower failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reset_follower_append_idx\"\n          }), _jsx(\"td\", {\n            children: \"reset follower append index successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reset_follower_append_idx_failures\"\n          }), _jsx(\"td\", {\n            children: \"reset follower append index failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reset_append_idx\"\n          }), _jsx(\"td\", {\n            children: \"reset current leader local append index\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reset_replica_idx\"\n          }), _jsx(\"td\", {\n            children: \"reset current leader replica index successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"reset_replica_failures\"\n          }), _jsx(\"td\", {\n            children: \"reset current leader replica index failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"send_msg\"\n          }), _jsx(\"td\", {\n            children: \"send replica msg successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"send_msg_failures\"\n          }), _jsx(\"td\", {\n            children: \"send replica msg failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"receive_msg\"\n          }), _jsx(\"td\", {\n            children: \"receive replica resp successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"receive_msg_failures\"\n          }), _jsx(\"td\", {\n            children: \"receive replica resp failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"ack_sequence\"\n          }), _jsx(\"td\", {\n            children: \"ack replica successfully sequence count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"invalid_ack_sequence\"\n          }), _jsx(\"td\", {\n            children: \"get wrong replica ack sequence from follower\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.tsdb.indexdb\"\n          }), _jsx(\"td\", {\n            children: \"db\"\n          }), _jsx(\"td\", {\n            children: \"build_inverted_index\"\n          }), _jsx(\"td\", {\n            children: \"build inverted index count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.tsdb.memdb\"\n          }), _jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"db\"\n          }), _jsx(\"td\", {\n            children: \"allocated_pages\"\n          }), _jsx(\"td\", {\n            children: \"allocate temp memory page successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"allocate_page_failures\"\n          }), _jsx(\"td\", {\n            children: \"allocate temp memory page failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.tsdb.database\"\n          }), _jsx(\"td\", {\n            children: \"db\"\n          }), _jsx(\"td\", {\n            children: \"metadb_flush_failures\"\n          }), _jsx(\"td\", {\n            children: \"flush metadata database failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.tsdb.database.metadb_flush_duration\"\n          }), _jsx(\"td\", {\n            children: \"db\"\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"flush metadata database duration(include count)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"8\",\n            children: \"lindb.tsdb.metadb\"\n          }), _jsx(\"td\", {\n            rowspan: \"8\",\n            children: \"db\"\n          }), _jsx(\"td\", {\n            children: \"gen_metric_ids\"\n          }), _jsx(\"td\", {\n            children: \"generate metric id successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gen_metric_id_failures\"\n          }), _jsx(\"td\", {\n            children: \"generate metric id failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gen_tag_key_ids\"\n          }), _jsx(\"td\", {\n            children: \"generate tag key id successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gen_tag_key_id_failures\"\n          }), _jsx(\"td\", {\n            children: \"generate tag key id failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gen_field_ids\"\n          }), _jsx(\"td\", {\n            children: \"generate field id successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gen_field_id_failures\"\n          }), _jsx(\"td\", {\n            children: \"generate field id failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gen_tag_value_ids\"\n          }), _jsx(\"td\", {\n            children: \"generate tag value id successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"gen_tag_value_id_failures\"\n          }), _jsx(\"td\", {\n            children: \"generate tag value id failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"10\",\n            children: \"lindb.tsdb.shard\"\n          }), _jsxs(\"td\", {\n            rowspan: \"10\",\n            children: [\"db\", _jsx(\"br\", {}), \"shard\"]\n          }), _jsx(\"td\", {\n            children: \"active_families\"\n          }), _jsx(\"td\", {\n            children: \"number of current active families\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_batches\"\n          }), _jsx(\"td\", {\n            children: \"write batch count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_metrics\"\n          }), _jsx(\"td\", {\n            children: \"write metric success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_fields\"\n          }), _jsx(\"td\", {\n            children: \"write field data point success count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_metrics_failures\"\n          }), _jsx(\"td\", {\n            children: \"write metric failures\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"memdb_total_size\"\n          }), _jsx(\"td\", {\n            children: \"total memory size of memory database\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"active_memdbs\"\n          }), _jsx(\"td\", {\n            children: \"number of current active memory database\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"memdb_flush_failures\"\n          }), _jsx(\"td\", {\n            children: \"flush memory database failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lookup_metric_meta_failures\"\n          }), _jsx(\"td\", {\n            children: \"lookup meta of metric failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"indexdb_flush_failures\"\n          }), _jsx(\"td\", {\n            children: \"flush index database failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.tsdb.shard.memdb_flush_duration\"\n          }), _jsxs(\"td\", {\n            children: [\"db\", _jsx(\"br\", {}), \"shard\"]\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"flush memory database duration(include count)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.tsdb.shard.indexdb_flush_duration\"\n          }), _jsxs(\"td\", {\n            children: [\"db\", _jsx(\"br\", {}), \"shard\"]\n          }), _jsx(\"td\", {\n            children: \"indexdb_flush_duration\"\n          }), _jsx(\"td\", {\n            children: \"flush index database duration(include count)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"6\",\n            children: \"lindb.kv.table.cache\"\n          }), _jsx(\"td\", {\n            rowspan: \"6\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"evicts\"\n          }), _jsx(\"td\", {\n            children: \"evict reader from cache\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"cache_hits\"\n          }), _jsx(\"td\", {\n            children: \"get reader hit cache\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"cache_misses\"\n          }), _jsx(\"td\", {\n            children: \"get reader miss cache\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"closes\"\n          }), _jsx(\"td\", {\n            children: \"close reader successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"close_failures\"\n          }), _jsx(\"td\", {\n            children: \"close reader failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"active_readers\"\n          }), _jsx(\"td\", {\n            children: \"number of active reader in cache\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"7\",\n            children: \"lindb.kv.table.read\"\n          }), _jsx(\"td\", {\n            rowspan: \"7\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"gets\"\n          }), _jsx(\"td\", {\n            children: \"get data by key successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"get_failures\"\n          }), _jsx(\"td\", {\n            children: \"get data by key failures\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"read_bytes\"\n          }), _jsx(\"td\", {\n            children: \"bytes of read data\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"mmaps\"\n          }), _jsx(\"td\", {\n            children: \"map file successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"mmap_failures\"\n          }), _jsx(\"td\", {\n            children: \"map file failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"unmmaps\"\n          }), _jsx(\"td\", {\n            children: \"unmam file successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"unmmap_failures\"\n          }), _jsx(\"td\", {\n            children: \"unmam file failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"3\",\n            children: \"lindb.kv.table.write\"\n          }), _jsx(\"td\", {\n            rowspan: \"3\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"bad_keys\"\n          }), _jsx(\"td\", {\n            children: \"add bad key count\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"add_keys\"\n          }), _jsx(\"td\", {\n            children: \"add key successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"write_bytes\"\n          }), _jsx(\"td\", {\n            children: \"bytes of write data\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.kv.compaction\"\n          }), _jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"type\"\n          }), _jsx(\"td\", {\n            children: \"compacting\"\n          }), _jsx(\"td\", {\n            children: \"number of compacting jobs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"failure\"\n          }), _jsx(\"td\", {\n            children: \"compact failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.kv.compaction.duration\"\n          }), _jsx(\"td\", {\n            children: \"type\"\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"compact duration(include count)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"lindb.kv.flush\"\n          }), _jsx(\"td\", {\n            rowspan: \"2\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"flushing\"\n          }), _jsx(\"td\", {\n            children: \"number of flushing jobs\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"failure\"\n          }), _jsx(\"td\", {\n            children: \"flush job failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"lindb.kv.flush.duration\"\n          }), _jsx(\"td\", {\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"histogram\"\n          }), _jsx(\"td\", {\n            children: \"flush duration(include count)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            rowspan: \"5\",\n            children: \"lindb.storage.query\"\n          }), _jsx(\"td\", {\n            rowspan: \"5\",\n            children: \"-\"\n          }), _jsx(\"td\", {\n            children: \"metric_queries\"\n          }), _jsx(\"td\", {\n            children: \"execute metric query successfully(just plan it)\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"metric_query_failures\"\n          }), _jsx(\"td\", {\n            children: \"execute metric query failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"meta_queries\"\n          }), _jsx(\"td\", {\n            children: \"metadata query successfully\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"meta_query_failures\"\n          }), _jsx(\"td\", {\n            children: \"metadata query failure\"\n          })]\n        }), _jsxs(\"tr\", {\n          children: [_jsx(\"td\", {\n            children: \"omitted_requests\"\n          }), _jsx(\"td\", {\n            children: \"omit request(task no belong to current node, wrong stream etc.)\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tocItems":[{"id":"通用","level":2,"title":"通用"},{"id":"go-runtimee","level":3,"title":"Go Runtimee"},{"id":"system","level":3,"title":"System"},{"id":"network","level":3,"title":"Network"},{"id":"concurrent","level":3,"title":"Concurrent"},{"id":"coordinator","level":3,"title":"Coordinator"},{"id":"query","level":3,"title":"Query"},{"id":"broker","level":2,"title":"Broker"},{"id":"storage","level":2,"title":"Storage"}],"releases":null,"sidebar":[{"index":2,"title":"Getting Started","children":[{"index":1,"title":"Docker","children":[],"href":"/docs/lindb/getting-started/docker"},{"index":2,"title":"安装包","children":[],"href":"/docs/lindb/getting-started/package"}]},{"index":3,"title":"Developer Guide","children":[{"index":1,"title":"建立连接","children":[],"href":"/docs/lindb/developer-guide/connect"},{"index":2,"title":"创建数据库","children":[],"href":"/docs/lindb/developer-guide/create-database"},{"index":3,"title":"写入数据","children":[],"href":"/docs/lindb/developer-guide/insert-data"},{"index":4,"title":"查询数据","children":[],"href":"/docs/lindb/developer-guide/query-data"}]},{"index":4,"title":"Deployment","children":[{"index":1,"title":"Kubernetes","children":[],"href":"/docs/lindb/deployment/kubernetes"},{"index":2,"title":"手动部署","children":[],"href":"/docs/lindb/deployment/manual"}]},{"index":5,"title":"Client","children":[{"index":1,"title":"CLI","children":[],"href":"/docs/lindb/client/cli"},{"index":2,"title":"客户端 SDK","children":[],"href":"/docs/lindb/client/client-libraries"},{"index":3,"title":"Go","children":[],"href":"/docs/lindb/client/go"},{"index":4,"title":"Java","children":[],"href":"/docs/lindb/client/java"}]},{"index":6,"title":"Lin Ql","children":[{"index":1,"title":"SQL","children":[],"href":"/docs/lindb/lin-ql/sql"}]},{"index":7,"title":"Admin Console","children":[{"index":1,"title":"简介","children":[],"href":"/docs/lindb/admin-console/index"},{"index":2,"title":"集群状态","children":[],"href":"/docs/lindb/admin-console/overview"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/admin-console/search"},{"index":4,"title":"数据浏览","children":[],"href":"/docs/lindb/admin-console/explore"},{"index":5,"title":"监控","children":[],"href":"/docs/lindb/admin-console/monitoring"},{"index":6,"title":"元数据","children":[],"href":"/docs/lindb/admin-console/metadata"}]},{"index":8,"title":"Api","children":[{"index":1,"title":"介绍","children":[],"href":"/docs/lindb/api/index"},{"index":2,"title":"数据写入","children":[],"href":"/docs/lindb/api/insert"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/api/query"},{"index":4,"title":"集群状态","children":[],"href":"/docs/lindb/api/state"}]},{"index":9,"title":"Reference","children":[{"index":1,"title":"数据模型","children":[],"href":"/docs/lindb/reference/data-model"},{"index":2,"title":"Metric","children":[],"href":"/docs/lindb/reference/metric"},{"index":3,"title":"配置参数","children":[],"href":"/docs/lindb/reference/configuration"}]},{"index":10,"title":"Design","children":[{"index":1,"title":"架构","children":[],"href":"/docs/lindb/design/architecture"},{"index":2,"title":"集群协调","children":[],"href":"/docs/lindb/design/coordinator"},{"index":3,"title":"数据复制","children":[],"href":"/docs/lindb/design/replication"},{"index":4,"title":"查询","children":[],"href":"/docs/lindb/design/query"},{"index":5,"title":"存储","children":[],"href":"/docs/lindb/design/storage"},{"index":6,"title":"内存数据库","children":[],"href":"/docs/lindb/design/memory-database"},{"index":7,"title":"例排索引","children":[],"href":"/docs/lindb/design/inverted-index"}]}],"locale":"zh","_nextI18Next":{"initialI18nStore":{"zh":{"translation":{"A lightweight, observability pipeline":"轻量级数据处理平台","A single server could easily support more than one million write TPS.":"机支持百万以上TPS写入；","Admin Console":"控制台","All-in-one observability platform":"一站式可观测平台","An open-source, cloud native, horizontally scalable, distributed time-series database.":"一款开源分布式时序数据库，具有高性能、高可用性和水平扩展性","An open-source, cloud native, observabilty platform":"云原生开源可观测平台","Architecture":"整体架构","Ask a Question":"提问","Auto Rollup":"自动 Rollup","Bug report":"发现 Bug","Client":"客户端","Cross Multiple IDCs":"跨多数据中心","Deployment":"集群部署","Design":"设计","Developer Guide":"开发手册","Distributed time-series database":"分布式时序数据库","Docs":"文档","Documentation":"文档","Downloads":"下载","Easy to use":"简单易用","Edit this page on Github":"在 GitHub 上编辑此页","Feature request":"新需求","Get Help":"获取帮助","Getting Started":"快速开始","High availability":"高可用","High performance":"高性能","Horizontal scalability":"水平扩展","Horizontal scalable is made simple by adding more new broker and storage nodes without too much thinking and manual operations Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Tags 级别的 Sharding 机制，可将任一 Metric 数据充分分散到多个存储节点；","Insert data":"数据写入","Inside LinDB":"技术内幕","Introduction":"介绍","Inverted index":"例排索引","Key Features":"主要功能","Learn More":"更多","License":"许可证","LinDB is designed to work under a Multi-Active IDCs cloud architecture. The compute layer of LinDB, called brokers, supports efficient Multi-IDCs aggregation query.":"支持各数据中心写入，多数据中心查询聚合；","LinDB supports rollup in specific intervals(minute, hour and day) automatically after creating the database(unlike the Continuous-Query of InfluxDB).":"支持秒级数据写入后自动Rollup到分钟、小时和天的粒度，无需人工介入（如 InfluxDB Continuous-Query）；","On this page":"本页导航","Open source":"开源","Query data":"数据查询","Read the installation guide for more information":{"":"查看安装手册了解更多信息。"},"Reference":"参考手册","Release Date":"发布时间","Release Note":"发布日志","Releases":"变更日志","Resources":"资源","Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Metric + Tags + Fields 的方式，无需提前定义 Schema；","Storage":"存储","Tags-based sharding strategy resolves the hotspot problem":"充分解决热点问题，可通过增加服务器数量线性增加处理能力；","The LinQL is flexible yet handy for real-time data analytics.":"可通过 LinQL 进行实时数据分析；","The multi-channel replication protocol supports any amount of nodes, ensures the system availability.":"独创的多通道复制协议支持任意节点数的多副本机制，可保证整个服务的高可用性；","This page could not be found":"找不到此页面","Uncompress":"解压","Version":"版本","View on GitHub":"GitHub","What's LinDB?":"什么是 LinDB？","What's New in":"","Why LinDB?":"为什么选择 LinDB？","With fundamental techniques like efficient compression storage and parallel computing, LinDB delivers highly optimized query performance.":"高效的数据压缩与多节点的并行查询与计算，专注查询性能优化；"}},"en":{"translation":{"Lin Ql":"Lin QL","Api":"API"}}},"initialLocale":"zh","ns":["translation"],"userConfig":null}},"__N_SSG":true}