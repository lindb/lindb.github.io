(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{101:function(e,n,t){"use strict";t.r(n);var o=t(0),r=Object(o.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"project-layout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#project-layout"}},[this._v("#")]),this._v(" Project Layout")]),this._v(" "),n("p",[this._v("This entire project is implemented by Go, so it follows the common rule of general Go project.\nBelow is a brief description for project structure")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v(".\n├─ aggregation    : data aggregation, function and expression calculation\n├─ bin            : directory of binary files, name of the binary package is `lind`\n├─ broker         : internal implementation and runtime dependencies of Broker \n├─ ci             : some CI tools and protobuf scripts\n├─ cmd            : entrance to the entire system, including Broker, Storage and Standalone running-mode\n├─ config         : required configurations for each component \n├─ constants      : common constant definitions\n├─ coordinator    : the distributed coordinator, including MetaData, State and Task management for Broker, Storage and Master \n├─ kv             : the underling common KV storage \n├─ mock           : mock helper functions used in the project\n├─ models         : Model definition for the entire projects\n├─ parallel       : Job and Task management for distributed query calculation\n├─ pkg            : reusable tools packages \n├─ query          : query implementation for Broker and Storage\n├─ replication    : WAL replication\n├─ rpc            : RPC for internal communication \n├─ service        : internal general services implementation\n├─ sql            : SQL parser\n├─ standalone     : runtime dependencies for standalone-mode\n├─ series         : Multi-version based on Bitmap and interfaces of series\n├─ storage        : internal implementation and runtime dependencies of Storage\n├─ tsdb           : storage engine of TimeSeries database\n│  ├─ diskdb      : disk database\n│  ├─ memdb       : Time Series In-Memory database\n│  └─ tblstore    : flushers and readers for metric data files and index files\n├─ vendor         : Go vender\n└─ web            : front-end project\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);