{"pageProps":{"page":{"path":"/docs/lindb/07-admin-console/05-monitoring.mdx","meta":{"title":"集群自身监控","sidebar":"监控"},"title":"监控","parent":"Admin Console","commitInfo":{"author":"stone1100","date":"Mon Jun 24 07:03:27 2024"}},"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Dashboard\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dashboard 为 LinDB 自带的自监控大盘，可以通过各组件相关 Dashboard 了解其内部实时运行状态。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"具体的指标说明请参考\", _jsx(_components.a, {\n        href: \"/docs/lindb/reference/metric\",\n        children: \"指标\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/guide/admin_ui/dashboard.png#browser\",\n        alt: \"Dashboard\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Broker Dashboard\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Dashboard\"\n          }), _jsx(_components.th, {\n            children: \"描述\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Broker Query\"\n          }), _jsx(_components.td, {\n            children: \"查询任务、请求响应\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Ingestion\"\n          }), _jsx(_components.td, {\n            children: \"接收写入的流量,IO，耗时\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Broker Write\"\n          }), _jsx(_components.td, {\n            children: \"写次数、统计\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Broker Coordinator\"\n          }), _jsx(_components.td, {\n            children: \"Broker 各节点协调相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Master Coordinator\"\n          }), _jsx(_components.td, {\n            children: \"Master 节点协调相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Master Controller\"\n          }), _jsx(_components.td, {\n            children: \"Master 选举相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Concurrent Pool\"\n          }), _jsx(_components.td, {\n            children: \"并发协程池相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Concurrent Limit\"\n          }), _jsx(_components.td, {\n            children: \"并发限流器相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Network TCP\"\n          }), _jsx(_components.td, {\n            children: \"TCP 连接、流量、IO\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Network GRPC\"\n          }), _jsx(_components.td, {\n            children: \"C/S请求，统计\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Runtime\"\n          }), _jsx(_components.td, {\n            children: \"Go 运行时相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"System\"\n          }), _jsx(_components.td, {\n            children: \"系统层相关监控，如CPU/Memory/Disk\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Storage Dashboard\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Dashboard\"\n          }), _jsx(_components.th, {\n            children: \"描述\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Storage Query\"\n          }), _jsx(_components.td, {\n            children: \"查询任务、请求响应\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"WAL\"\n          }), _jsx(_components.td, {\n            children: \"Write Ahead Log 相关监控，主要包括接收写入及复制请求到写 WAL\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Local Replication\"\n          }), _jsx(_components.td, {\n            children: \"本地从 WAL 消费日志到写 TSDB 存储\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Remote Replication\"\n          }), _jsx(_components.td, {\n            children: \"Leader 消费 WAL 日志并把数据复制给 Follower 节点\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Storage Coordinator\"\n          }), _jsx(_components.td, {\n            children: \"存储各节点协调相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"TSDB Write\"\n          }), _jsx(_components.td, {\n            children: \"Family、内存数据库写\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"TSDB Job\"\n          }), _jsx(_components.td, {\n            children: \"Flush操作\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"KV Read\"\n          }), _jsx(_components.td, {\n            children: \"底层 KV Store 读相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"KV Write\"\n          }), _jsx(_components.td, {\n            children: \"底层 KV Store 写相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"KV Job\"\n          }), _jsx(_components.td, {\n            children: \"底层 KV Store 后台任务相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Concurrent Pool\"\n          }), _jsx(_components.td, {\n            children: \"并发协程池相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Network TCP\"\n          }), _jsx(_components.td, {\n            children: \"TCP 连接、流量、IO\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Network GRPC\"\n          }), _jsx(_components.td, {\n            children: \"GRPC 相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Runtime\"\n          }), _jsx(_components.td, {\n            children: \"Go 运行时相关监控\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"System\"\n          }), _jsx(_components.td, {\n            children: \"系统层相关监控，如CPU/Memory/Disk\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Replication\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"数据库副本状态信息主要包括如下状态：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"数据库的基本状态信息，如副本数；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"副本分布及当前副本的复制情况，如当前哪些复制通道有延时等；\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"本地副本写入情况。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"WAL\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中副本状态可以有如下 2 种方式查看，通过 Replication State 右侧的按钮进行切换：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"模式 1：以副本在每个 Storage 节点的分布情况为视角展现，同时展现是否有复制延时，鼠标 Hover 到某个分片 Shard\\n上可以展现当前分片各通道的复制情况；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/guide/admin_ui/replication_shards.png#browser\",\n        alt: \"Replication shards\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"模式 2：以所有分片 Shard 下所有复制通道为视角展现，支持 Shard/Family 相关的过滤筛选；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/guide/admin_ui/replication_families.png#browser\",\n        alt: \"Replication families\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Write\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"本地副本的写入情况：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"各内存数据库的写入状态；\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"各\", _jsx(_components.strong, {\n            children: \"Leader\"\n          }), \"写入指针状态；\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"模式 1：以所有分片 Shard 下所有内存数据库为视角展现，展现当前所有内存库的写入状态，支持 Shard/Family 相关的过滤筛选；\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/guide/admin_ui/memory_database_write.png#browser\",\n        alt: \"Memory database write\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"模式 2：以所有分片 Shard 下所有活跃 Family 为视角展现，展现当前所有活跃 Family 各复制状态，支持 Shard/Family 相关的过滤筛选；\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/guide/admin_ui/memory_database_replica.png#browser\",\n        alt: \"Memory database replica\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Request\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"浏览当前集群中正在执行的 \", _jsx(_components.a, {\n        href: \"/docs/lindb/lin-ql/sql\",\n        children: \"LinQL\"\n      }), \" 语句。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/guide/admin_ui/request_list.png#browser\",\n        alt: \"Memory database replica\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Log View\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Log View 允许用户浏览集群中所有节点上的日志文件，并在页面上展现相关的日志信息。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/guide/admin_ui/log_view.png#browser\",\n        alt: \"Log view\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tocItems":[{"id":"dashboard","level":2,"title":"Dashboard"},{"id":"broker-dashboard","level":3,"title":"Broker Dashboard"},{"id":"storage-dashboard","level":3,"title":"Storage Dashboard"},{"id":"replication","level":2,"title":"Replication"},{"id":"wal","level":3,"title":"WAL"},{"id":"write","level":3,"title":"Write"},{"id":"request","level":2,"title":"Request"},{"id":"log-view","level":2,"title":"Log View"}],"releases":null,"sidebar":[{"index":2,"title":"Getting Started","children":[{"index":1,"title":"Docker","children":[],"href":"/docs/lindb/getting-started/docker"},{"index":2,"title":"安装包","children":[],"href":"/docs/lindb/getting-started/package"}]},{"index":3,"title":"Developer Guide","children":[{"index":1,"title":"建立连接","children":[],"href":"/docs/lindb/developer-guide/connect"},{"index":2,"title":"创建数据库","children":[],"href":"/docs/lindb/developer-guide/create-database"},{"index":3,"title":"写入数据","children":[],"href":"/docs/lindb/developer-guide/insert-data"},{"index":4,"title":"查询数据","children":[],"href":"/docs/lindb/developer-guide/query-data"}]},{"index":4,"title":"Deployment","children":[{"index":1,"title":"Kubernetes","children":[],"href":"/docs/lindb/deployment/kubernetes"},{"index":2,"title":"手动部署","children":[],"href":"/docs/lindb/deployment/manual"}]},{"index":5,"title":"Client","children":[{"index":1,"title":"CLI","children":[],"href":"/docs/lindb/client/cli"},{"index":2,"title":"客户端 SDK","children":[],"href":"/docs/lindb/client/client-libraries"},{"index":3,"title":"Go","children":[],"href":"/docs/lindb/client/go"},{"index":4,"title":"Java","children":[],"href":"/docs/lindb/client/java"}]},{"index":6,"title":"Lin Ql","children":[{"index":1,"title":"SQL","children":[],"href":"/docs/lindb/lin-ql/sql"}]},{"index":7,"title":"Admin Console","children":[{"index":1,"title":"简介","children":[],"href":"/docs/lindb/admin-console/index"},{"index":2,"title":"集群状态","children":[],"href":"/docs/lindb/admin-console/overview"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/admin-console/search"},{"index":4,"title":"数据浏览","children":[],"href":"/docs/lindb/admin-console/explore"},{"index":5,"title":"监控","children":[],"href":"/docs/lindb/admin-console/monitoring"},{"index":6,"title":"元数据","children":[],"href":"/docs/lindb/admin-console/metadata"}]},{"index":8,"title":"Api","children":[{"index":1,"title":"介绍","children":[],"href":"/docs/lindb/api/index"},{"index":2,"title":"数据写入","children":[],"href":"/docs/lindb/api/insert"},{"index":3,"title":"数据查询","children":[],"href":"/docs/lindb/api/query"},{"index":4,"title":"集群状态","children":[],"href":"/docs/lindb/api/state"}]},{"index":9,"title":"Reference","children":[{"index":1,"title":"数据模型","children":[],"href":"/docs/lindb/reference/data-model"},{"index":2,"title":"Metric","children":[],"href":"/docs/lindb/reference/metric"},{"index":3,"title":"配置参数","children":[],"href":"/docs/lindb/reference/configuration"}]},{"index":10,"title":"Design","children":[{"index":1,"title":"架构","children":[],"href":"/docs/lindb/design/architecture"},{"index":2,"title":"集群协调","children":[],"href":"/docs/lindb/design/coordinator"},{"index":3,"title":"数据复制","children":[],"href":"/docs/lindb/design/replication"},{"index":4,"title":"查询","children":[],"href":"/docs/lindb/design/query"},{"index":5,"title":"存储","children":[],"href":"/docs/lindb/design/storage"},{"index":6,"title":"内存数据库","children":[],"href":"/docs/lindb/design/memory-database"},{"index":7,"title":"例排索引","children":[],"href":"/docs/lindb/design/inverted-index"}]}],"locale":"zh","_nextI18Next":{"initialI18nStore":{"zh":{"translation":{"A lightweight, observability pipeline":"轻量级数据处理平台","A single server could easily support more than one million write TPS.":"机支持百万以上TPS写入；","Admin Console":"控制台","All-in-one observability platform":"一站式可观测平台","An open-source, cloud native, horizontally scalable, distributed time-series database.":"一款开源分布式时序数据库，具有高性能、高可用性和水平扩展性","An open-source, cloud native, observabilty platform":"云原生开源可观测平台","Architecture":"整体架构","Ask a Question":"提问","Auto Rollup":"自动 Rollup","Bug report":"发现 Bug","Client":"客户端","Cross Multiple IDCs":"跨多数据中心","Deployment":"集群部署","Design":"设计","Developer Guide":"开发手册","Distributed time-series database":"分布式时序数据库","Docs":"文档","Documentation":"文档","Downloads":"下载","Easy to use":"简单易用","Edit this page on Github":"在 GitHub 上编辑此页","Feature request":"新需求","Get Help":"获取帮助","Getting Started":"快速开始","High availability":"高可用","High performance":"高性能","Horizontal scalability":"水平扩展","Horizontal scalable is made simple by adding more new broker and storage nodes without too much thinking and manual operations Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Tags 级别的 Sharding 机制，可将任一 Metric 数据充分分散到多个存储节点；","Insert data":"数据写入","Inside LinDB":"技术内幕","Introduction":"介绍","Inverted index":"例排索引","Key Features":"主要功能","Learn More":"更多","License":"许可证","LinDB is designed to work under a Multi-Active IDCs cloud architecture. The compute layer of LinDB, called brokers, supports efficient Multi-IDCs aggregation query.":"支持各数据中心写入，多数据中心查询聚合；","LinDB supports rollup in specific intervals(minute, hour and day) automatically after creating the database(unlike the Continuous-Query of InfluxDB).":"支持秒级数据写入后自动Rollup到分钟、小时和天的粒度，无需人工介入（如 InfluxDB Continuous-Query）；","On this page":"本页导航","Open source":"开源","Query data":"数据查询","Read the installation guide for more information":{"":"查看安装手册了解更多信息。"},"Reference":"参考手册","Release Date":"发布时间","Release Note":"发布日志","Releases":"变更日志","Resources":"资源","Schema-free multi-dimensional data model with Metric, Tags, and Fields.":"支持 Metric + Tags + Fields 的方式，无需提前定义 Schema；","Storage":"存储","Tags-based sharding strategy resolves the hotspot problem":"充分解决热点问题，可通过增加服务器数量线性增加处理能力；","The LinQL is flexible yet handy for real-time data analytics.":"可通过 LinQL 进行实时数据分析；","The multi-channel replication protocol supports any amount of nodes, ensures the system availability.":"独创的多通道复制协议支持任意节点数的多副本机制，可保证整个服务的高可用性；","This page could not be found":"找不到此页面","Uncompress":"解压","Version":"版本","View on GitHub":"GitHub","What's LinDB?":"什么是 LinDB？","What's New in":"","Why LinDB?":"为什么选择 LinDB？","With fundamental techniques like efficient compression storage and parallel computing, LinDB delivers highly optimized query performance.":"高效的数据压缩与多节点的并行查询与计算，专注查询性能优化；"}},"en":{"translation":{"Lin Ql":"Lin QL","Api":"API"}}},"initialLocale":"zh","ns":["translation"],"userConfig":null}},"__N_SSG":true}