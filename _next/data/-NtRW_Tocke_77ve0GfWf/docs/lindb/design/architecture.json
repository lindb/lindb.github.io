{"pageProps":{"page":{"path":"/docs/lindb/10-design/01-architecture.mdx","meta":{"title":"Architecture"},"title":"Architecture","parent":"Design","commitInfo":{"author":"stone1100","date":"Mon Jun 24 07:03:27 2024"}},"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Design goals\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"High Availability;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Easy Usability and Maintenance;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Cluster Deployment;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Replication;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Support Multiple IDCs;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Eventually Consistency;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Self-Monitoring Ability;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Self-Governance Ability;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Overview\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/img/lindb/design/architecture.png\",\n        alt: \"Architecture\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LinDB adopts the design of Separating compute and storage:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Computation layer\"\n        }), \": Broker cluster is responsible for handling read/write requests;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Storage layer\"\n        }), \": Storage cluster is responsible for data storage, which may be composed of multiple components. Each cluster acts as an independent storage unit;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Computation layer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Broker is a stateless service with horizontal expansion capability.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The main responsibilities of the Broker are as follows:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Load Balancing\"\n        }), \": Multiple stateless Broker instances are able to handle the IO requests at access layer.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Data Ingestion\"\n        }), \": Broker communicates with the Shard Leader node, and delivering writing to the Leader-Node according to the Shard status of the target database, then the Leader-Node will perform multiple-follower replication;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Distributed Query\"\n        }), \": Broker generate different execution plans according to the specific query situation;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Query-Result-Aggregation\"\n        }), \": Aggregate data returned by Broker (As Intermediate Node) / Storage(As Leaf Node);\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Cross-IDC-Query-Result-Aggregation\"\n        }), \": Re-Aggregating multi-IDC query results;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Master is a special Broker-Node,  who takes all modification of Metadata and dispatches it to the corresponding node to ensure metadata consistency.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since the Master itself is only responsible for lightweight operations, and in order to simplify the architecture, master is elected from Broker node via preemption election.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Storage layer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Storage is a stateful service that stores data without the Metadata. It is also able to scale horizontally. The main responsibilities are as follows:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Write\"\n        }), \": Storing all data and index of database, as well as its own MetaData(Metric/Tags/Fields);\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Read\"\n        }), \": Perform data filtering and some simple aggregation (aggregation of basic Field Type) and Down Sampling operations;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"DDL\"\n        }), \": Execute Metadata change task dispatched by Broker, such as database creation, data governance, etc.;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"MetaData layer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ETCD is the only external dependency of LinDB, it stores all metadata.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The main responsibilities of ETCD are as follows:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Metadata Storage\"\n        }), \": database configuration, sharding details, status of Broker/Storage Node;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Distributed Scheduling\"\n        }), \": Every change to Metadata is sent to the Storage node through ETCD;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LinDB can still handle read and write requests when ETCD fails when the following two preconditions are met:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"When ETCD is down, no more modification of Metadata will be performed, such as modifying the configuration of database;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The cluster status is still healthy, which means that the current Metadata/Status is available for coordinating the entire cluster;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Certain self-healing ability: When the data in ETCD is completely unavailable or lost, Broker/Storage can report Metadata/Status to the new ETCD cluster for failover;\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tocItems":[{"id":"design-goals","level":2,"title":"Design goals"},{"id":"overview","level":2,"title":"Overview"},{"id":"computation-layer","level":3,"title":"Computation layer"},{"id":"storage-layer","level":3,"title":"Storage layer"},{"id":"metadata-layer","level":3,"title":"MetaData layer"}],"releases":null,"sidebar":[{"index":2,"title":"Getting Started","children":[{"index":1,"title":"Docker","children":[],"href":"/docs/lindb/getting-started/docker"},{"index":2,"title":"Package","children":[],"href":"/docs/lindb/getting-started/package"}]},{"index":3,"title":"Developer Guide","children":[{"index":1,"title":"Connect","children":[],"href":"/docs/lindb/developer-guide/connect"},{"index":2,"title":"Create a database","children":[],"href":"/docs/lindb/developer-guide/create-database"},{"index":3,"title":"Insert data","children":[],"href":"/docs/lindb/developer-guide/insert-data"},{"index":4,"title":"Query data","children":[],"href":"/docs/lindb/developer-guide/query-data"}]},{"index":4,"title":"Deployment","children":[{"index":1,"title":"Kubernetes","children":[],"href":"/docs/lindb/deployment/kubernetes"},{"index":2,"title":"Manual deployment","children":[],"href":"/docs/lindb/deployment/manual"}]},{"index":5,"title":"Client","children":[{"index":1,"title":"CLI","children":[],"href":"/docs/lindb/client/cli"},{"index":2,"title":"Client libraries","children":[],"href":"/docs/lindb/client/client-libraries"},{"index":3,"title":"Go","children":[],"href":"/docs/lindb/client/go"},{"index":4,"title":"Java","children":[],"href":"/docs/lindb/client/java"}]},{"index":6,"title":"Lin Ql","children":[{"index":1,"title":"Lin query language","children":[],"href":"/docs/lindb/lin-ql/sql"}]},{"index":7,"title":"Admin Console","children":[{"index":1,"title":"Introduction","children":[],"href":"/docs/lindb/admin-console/index"},{"index":2,"title":"Cluster overview","children":[],"href":"/docs/lindb/admin-console/overview"},{"index":3,"title":"Data search","children":[],"href":"/docs/lindb/admin-console/search"},{"index":4,"title":"Data explore","children":[],"href":"/docs/lindb/admin-console/explore"},{"index":5,"title":"Cluster monitoring","children":[],"href":"/docs/lindb/admin-console/monitoring"},{"index":6,"title":"Metadata","children":[],"href":"/docs/lindb/admin-console/metadata"}]},{"index":8,"title":"Api","children":[{"index":1,"title":"Introduction","children":[],"href":"/docs/lindb/api/index"},{"index":2,"title":"Insert","children":[],"href":"/docs/lindb/api/insert"},{"index":3,"title":"Query","children":[],"href":"/docs/lindb/api/query"},{"index":4,"title":"State","children":[],"href":"/docs/lindb/api/state"}]},{"index":9,"title":"Reference","children":[{"index":1,"title":"Data Model","children":[],"href":"/docs/lindb/reference/data-model"},{"index":2,"title":"Metric","children":[],"href":"/docs/lindb/reference/metric"},{"index":3,"title":"Configuration","children":[],"href":"/docs/lindb/reference/configuration"}]},{"index":10,"title":"Design","children":[{"index":1,"title":"Architecture","children":[],"href":"/docs/lindb/design/architecture"},{"index":2,"title":"Coordinator","children":[],"href":"/docs/lindb/design/coordinator"},{"index":3,"title":"Replication","children":[],"href":"/docs/lindb/design/replication"},{"index":4,"title":"Query","children":[],"href":"/docs/lindb/design/query"},{"index":5,"title":"Storage","children":[],"href":"/docs/lindb/design/storage"},{"index":6,"title":"Memory database","children":[],"href":"/docs/lindb/design/memory-database"},{"index":7,"title":"Inverted index","children":[],"href":"/docs/lindb/design/inverted-index"}]}],"locale":"","_nextI18Next":{"initialI18nStore":{"en":{"translation":{"Lin Ql":"Lin QL","Api":"API"}}},"initialLocale":"en","ns":["translation"],"userConfig":null}},"__N_SSG":true}