(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{117:function(n,t,e){"use strict";e.r(t);var r=e(0),i=Object(r.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"项目结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[this._v("#")]),this._v(" 项目结构")]),this._v(" "),t("p",[this._v("整个项目使用 Go 实现，所以遵循了一般 Go 项目的规则，下面是整个项目结构的简单说明：")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("├── aggregation           : 数据聚合，函数及表达式计算\n├── app                   : broker、storage、standalone、cli 等runtime\n│   ├── broker            : Broker 内部实现及整个 Broker 的运行时依赖\n│   ├── cli               : 交互式命令行\n│   ├── standalone        : 单机模式运行时依赖\n│   └── storage           : storage 内部实现与 运行时依赖\n├── bin                   : 编译生成的文件，二进制包名称为 `lind`\n├── cmd                   : main 函数\n│   └── lind              : lind 二进制包\n├── config                : 各组件启动时需要的配置项\n├── constants             : 一些通用的常量定义\n├── coordinator           : 分布式的协调者，包括 Metadata, State 及 Task 的管理，包含了 Broker, Storage 及 Master 等\n├── flow                  : 数据查询流程接口\n├── ingestion             : metric数据摄取入口\n│   ├── common            : gzip handler、行解析等通用工具\n│   ├── influx            : influxdb 数据转换到linmetric\n│   ├── native            : lindb 原生的http接收器\n│   └── prometheus        : prometheus 数据解析转换\n├── internal              : 内部的一些工具包\n│   ├── bootstrap         : 启动时初始化_internal数据库的方法\n│   ├── concurrent        : 并发goroutine池\n│   ├── conntrack         : grpc 与 tcp conn埋点钩子\n│   ├── server            : app 通用接口\n│   ├── linmetric         : lindb自带的内部多值类型的sdk打点工具\n│   └── mock              : 项目所用到的一些 Mock 工具实现\n├── kv                    : 底层的通用 KV 存储\n├── models                : 整个项目的 Model 定义\n├── monitoring            : 自带的系统层监控采集与native metrics pusher\n├── pkg                   : 整个项目通用工具包\n│   ├── bit               : 位读写\n│   ├── bufioutil         : 缓冲io工具包\n│   ├── bufpool           : 存放buffer的sync pool\n│   ├── collections       : float array、bit array 等数据结构\n│   ├── encoding          : delta-bit-packing、zigzag 等编码工具包\n│   ├── fasttime          : 毫秒级的时间，避免频繁的系统调用\n│   ├── fileutil          : 常用的文件操作\n│   ├── hostutil          : 获取机器状态的包\n│   ├── http              : gin http server的通用方法\n│   ├── lockers           : 文件锁\n│   ├── logger            : zap logger\n│   ├── ltoml             : toml文件解析与类型\n│   ├── option            : shard 配置选项\n│   ├── queue             : 持久化队列\n│   ├── state             : etcd 操作工包\n│   ├── stream            : 文件读取工具包\n│   ├── strutil           : 字符串工具包\n│   ├── timeutil          : 时间处理工具包\n│   └── trie              : 紧凑型的trie树，用于string->int的存储\n├── proto                 : protobuf\n│   ├── gen               : protobuf 生成的golang code\n│   ├── opentelemetry-v1  : open telemetry的protobuf文件，暂未利用\n│   └── v1                : lindb内的proto buf 文件\n├── query                 : 分布式的数据与元数据查询\n│   ├── broker            : 计算节点的数据查询与聚合\n│   └── storage           : 存储节点的数据查询与聚合\n├── replica               : storage层的复制\n├── replication           : broker层的复制\n├── rpc                   : 内部通信的 RPC \n├── series                : 时间线迭代器、聚合器\n│   ├── field             : field数据结构与聚合器\n│   ├── metric            : metric校验与histogram工具类\n│   └── tag               : tag数据结构\n├── sql                   : SQL 解析\n│   ├── grammar           : antlr4生成的语法解析器\n│   └── stmt              : SQL statement \n├── tsdb                  : 整个 Time Series 存储引擎 \n│   ├── cumulativecache   : 简单的cumulative型数据到lindb delta数值的转换缓存\n│   ├── indexdb           : 索引存储\n│   ├── memdb             : LSM 树的内存数据库\n│   ├── metadb            : metric 元数据\n│   ├── query             : tsdb层的查询上下文对象\n│   ├── tblstore          : tsdb与 KV 存储的读写交互，包括索引文件与数据文件\n│   ├── template          : 利用模板生成一些通用的代码\n│   └── wal               : Write Ahead Log\n└── web                   : lindb admin页面的前端项目\n\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);